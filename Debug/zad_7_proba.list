
zad_7_proba.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026ac  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08002834  08002834  00012834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028a8  080028a8  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080028a8  080028a8  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028a8  080028a8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028a8  080028a8  000128a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028ac  080028ac  000128ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080028b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000004  080028b4  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000150  080028b4  00020150  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004b6c  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000fa7  00000000  00000000  00024ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000680  00000000  00000000  00025b48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005f8  00000000  00000000  000261c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015f15  00000000  00000000  000267c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00003a62  00000000  00000000  0003c6d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007532b  00000000  00000000  00040137  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b5462  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c54  00000000  00000000  000b54e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800281c 	.word	0x0800281c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	0800281c 	.word	0x0800281c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2uiz>:
 8000a74:	004a      	lsls	r2, r1, #1
 8000a76:	d211      	bcs.n	8000a9c <__aeabi_d2uiz+0x28>
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d211      	bcs.n	8000aa2 <__aeabi_d2uiz+0x2e>
 8000a7e:	d50d      	bpl.n	8000a9c <__aeabi_d2uiz+0x28>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d40e      	bmi.n	8000aa8 <__aeabi_d2uiz+0x34>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d102      	bne.n	8000aae <__aeabi_d2uiz+0x3a>
 8000aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aac:	4770      	bx	lr
 8000aae:	f04f 0000 	mov.w	r0, #0
 8000ab2:	4770      	bx	lr

08000ab4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	f003 0307 	and.w	r3, r3, #7
 8000ac2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aca:	68ba      	ldr	r2, [r7, #8]
 8000acc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000adc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ae0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ae6:	4a04      	ldr	r2, [pc, #16]	; (8000af8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	60d3      	str	r3, [r2, #12]
}
 8000aec:	bf00      	nop
 8000aee:	3714      	adds	r7, #20
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b00:	4b04      	ldr	r3, [pc, #16]	; (8000b14 <__NVIC_GetPriorityGrouping+0x18>)
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	0a1b      	lsrs	r3, r3, #8
 8000b06:	f003 0307 	and.w	r3, r3, #7
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	db0b      	blt.n	8000b42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	f003 021f 	and.w	r2, r3, #31
 8000b30:	4907      	ldr	r1, [pc, #28]	; (8000b50 <__NVIC_EnableIRQ+0x38>)
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	095b      	lsrs	r3, r3, #5
 8000b38:	2001      	movs	r0, #1
 8000b3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b42:	bf00      	nop
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	e000e100 	.word	0xe000e100

08000b54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	6039      	str	r1, [r7, #0]
 8000b5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	db0a      	blt.n	8000b7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	b2da      	uxtb	r2, r3
 8000b6c:	490c      	ldr	r1, [pc, #48]	; (8000ba0 <__NVIC_SetPriority+0x4c>)
 8000b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b72:	0112      	lsls	r2, r2, #4
 8000b74:	b2d2      	uxtb	r2, r2
 8000b76:	440b      	add	r3, r1
 8000b78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b7c:	e00a      	b.n	8000b94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	b2da      	uxtb	r2, r3
 8000b82:	4908      	ldr	r1, [pc, #32]	; (8000ba4 <__NVIC_SetPriority+0x50>)
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	f003 030f 	and.w	r3, r3, #15
 8000b8a:	3b04      	subs	r3, #4
 8000b8c:	0112      	lsls	r2, r2, #4
 8000b8e:	b2d2      	uxtb	r2, r2
 8000b90:	440b      	add	r3, r1
 8000b92:	761a      	strb	r2, [r3, #24]
}
 8000b94:	bf00      	nop
 8000b96:	370c      	adds	r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	e000e100 	.word	0xe000e100
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b089      	sub	sp, #36	; 0x24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	f003 0307 	and.w	r3, r3, #7
 8000bba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bbc:	69fb      	ldr	r3, [r7, #28]
 8000bbe:	f1c3 0307 	rsb	r3, r3, #7
 8000bc2:	2b04      	cmp	r3, #4
 8000bc4:	bf28      	it	cs
 8000bc6:	2304      	movcs	r3, #4
 8000bc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	3304      	adds	r3, #4
 8000bce:	2b06      	cmp	r3, #6
 8000bd0:	d902      	bls.n	8000bd8 <NVIC_EncodePriority+0x30>
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	3b03      	subs	r3, #3
 8000bd6:	e000      	b.n	8000bda <NVIC_EncodePriority+0x32>
 8000bd8:	2300      	movs	r3, #0
 8000bda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8000be0:	69bb      	ldr	r3, [r7, #24]
 8000be2:	fa02 f303 	lsl.w	r3, r2, r3
 8000be6:	43da      	mvns	r2, r3
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	401a      	ands	r2, r3
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bf0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bfa:	43d9      	mvns	r1, r3
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c00:	4313      	orrs	r3, r2
         );
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3724      	adds	r7, #36	; 0x24
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
	...

08000c10 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	60b9      	str	r1, [r7, #8]
 8000c1a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	3b01      	subs	r3, #1
 8000c20:	4a0d      	ldr	r2, [pc, #52]	; (8000c58 <LL_DMA_SetDataTransferDirection+0x48>)
 8000c22:	5cd3      	ldrb	r3, [r2, r3]
 8000c24:	461a      	mov	r2, r3
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	4413      	add	r3, r2
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000c30:	f023 0310 	bic.w	r3, r3, #16
 8000c34:	68ba      	ldr	r2, [r7, #8]
 8000c36:	3a01      	subs	r2, #1
 8000c38:	4907      	ldr	r1, [pc, #28]	; (8000c58 <LL_DMA_SetDataTransferDirection+0x48>)
 8000c3a:	5c8a      	ldrb	r2, [r1, r2]
 8000c3c:	4611      	mov	r1, r2
 8000c3e:	68fa      	ldr	r2, [r7, #12]
 8000c40:	440a      	add	r2, r1
 8000c42:	4611      	mov	r1, r2
 8000c44:	687a      	ldr	r2, [r7, #4]
 8000c46:	4313      	orrs	r3, r2
 8000c48:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8000c4a:	bf00      	nop
 8000c4c:	3714      	adds	r7, #20
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	08002888 	.word	0x08002888

08000c5c <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60f8      	str	r0, [r7, #12]
 8000c64:	60b9      	str	r1, [r7, #8]
 8000c66:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	4a0c      	ldr	r2, [pc, #48]	; (8000ca0 <LL_DMA_SetMode+0x44>)
 8000c6e:	5cd3      	ldrb	r3, [r2, r3]
 8000c70:	461a      	mov	r2, r3
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	4413      	add	r3, r2
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f023 0220 	bic.w	r2, r3, #32
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	3b01      	subs	r3, #1
 8000c80:	4907      	ldr	r1, [pc, #28]	; (8000ca0 <LL_DMA_SetMode+0x44>)
 8000c82:	5ccb      	ldrb	r3, [r1, r3]
 8000c84:	4619      	mov	r1, r3
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	440b      	add	r3, r1
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	600b      	str	r3, [r1, #0]
             Mode);
}
 8000c92:	bf00      	nop
 8000c94:	3714      	adds	r7, #20
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	08002888 	.word	0x08002888

08000ca4 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	4a0c      	ldr	r2, [pc, #48]	; (8000ce8 <LL_DMA_SetPeriphIncMode+0x44>)
 8000cb6:	5cd3      	ldrb	r3, [r2, r3]
 8000cb8:	461a      	mov	r2, r3
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	3b01      	subs	r3, #1
 8000cc8:	4907      	ldr	r1, [pc, #28]	; (8000ce8 <LL_DMA_SetPeriphIncMode+0x44>)
 8000cca:	5ccb      	ldrb	r3, [r1, r3]
 8000ccc:	4619      	mov	r1, r3
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	440b      	add	r3, r1
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 8000cda:	bf00      	nop
 8000cdc:	3714      	adds	r7, #20
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	08002888 	.word	0x08002888

08000cec <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	4a0c      	ldr	r2, [pc, #48]	; (8000d30 <LL_DMA_SetMemoryIncMode+0x44>)
 8000cfe:	5cd3      	ldrb	r3, [r2, r3]
 8000d00:	461a      	mov	r2, r3
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	4413      	add	r3, r2
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	3b01      	subs	r3, #1
 8000d10:	4907      	ldr	r1, [pc, #28]	; (8000d30 <LL_DMA_SetMemoryIncMode+0x44>)
 8000d12:	5ccb      	ldrb	r3, [r1, r3]
 8000d14:	4619      	mov	r1, r3
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	440b      	add	r3, r1
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 8000d22:	bf00      	nop
 8000d24:	3714      	adds	r7, #20
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	08002888 	.word	0x08002888

08000d34 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	3b01      	subs	r3, #1
 8000d44:	4a0c      	ldr	r2, [pc, #48]	; (8000d78 <LL_DMA_SetPeriphSize+0x44>)
 8000d46:	5cd3      	ldrb	r3, [r2, r3]
 8000d48:	461a      	mov	r2, r3
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	3b01      	subs	r3, #1
 8000d58:	4907      	ldr	r1, [pc, #28]	; (8000d78 <LL_DMA_SetPeriphSize+0x44>)
 8000d5a:	5ccb      	ldrb	r3, [r1, r3]
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	440b      	add	r3, r1
 8000d62:	4619      	mov	r1, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 8000d6a:	bf00      	nop
 8000d6c:	3714      	adds	r7, #20
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	08002888 	.word	0x08002888

08000d7c <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	4a0c      	ldr	r2, [pc, #48]	; (8000dc0 <LL_DMA_SetMemorySize+0x44>)
 8000d8e:	5cd3      	ldrb	r3, [r2, r3]
 8000d90:	461a      	mov	r2, r3
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	4413      	add	r3, r2
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	4907      	ldr	r1, [pc, #28]	; (8000dc0 <LL_DMA_SetMemorySize+0x44>)
 8000da2:	5ccb      	ldrb	r3, [r1, r3]
 8000da4:	4619      	mov	r1, r3
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	440b      	add	r3, r1
 8000daa:	4619      	mov	r1, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 8000db2:	bf00      	nop
 8000db4:	3714      	adds	r7, #20
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	08002888 	.word	0x08002888

08000dc4 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	4a0c      	ldr	r2, [pc, #48]	; (8000e08 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8000dd6:	5cd3      	ldrb	r3, [r2, r3]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	4413      	add	r3, r2
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	3b01      	subs	r3, #1
 8000de8:	4907      	ldr	r1, [pc, #28]	; (8000e08 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8000dea:	5ccb      	ldrb	r3, [r1, r3]
 8000dec:	4619      	mov	r1, r3
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	440b      	add	r3, r1
 8000df2:	4619      	mov	r1, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	600b      	str	r3, [r1, #0]
             Priority);
}
 8000dfa:	bf00      	nop
 8000dfc:	3714      	adds	r7, #20
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	08002888 	.word	0x08002888

08000e0c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000e10:	4b05      	ldr	r3, [pc, #20]	; (8000e28 <LL_RCC_HSI_Enable+0x1c>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a04      	ldr	r2, [pc, #16]	; (8000e28 <LL_RCC_HSI_Enable+0x1c>)
 8000e16:	f043 0301 	orr.w	r3, r3, #1
 8000e1a:	6013      	str	r3, [r2, #0]
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	40021000 	.word	0x40021000

08000e2c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000e30:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <LL_RCC_HSI_IsReady+0x20>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f003 0302 	and.w	r3, r3, #2
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	bf0c      	ite	eq
 8000e3c:	2301      	moveq	r3, #1
 8000e3e:	2300      	movne	r3, #0
 8000e40:	b2db      	uxtb	r3, r3
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	40021000 	.word	0x40021000

08000e50 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000e58:	4b07      	ldr	r3, [pc, #28]	; (8000e78 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	00db      	lsls	r3, r3, #3
 8000e64:	4904      	ldr	r1, [pc, #16]	; (8000e78 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000e66:	4313      	orrs	r3, r2
 8000e68:	600b      	str	r3, [r1, #0]
}
 8000e6a:	bf00      	nop
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	40021000 	.word	0x40021000

08000e7c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <LL_RCC_SetSysClkSource+0x24>)
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f023 0203 	bic.w	r2, r3, #3
 8000e8c:	4904      	ldr	r1, [pc, #16]	; (8000ea0 <LL_RCC_SetSysClkSource+0x24>)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	604b      	str	r3, [r1, #4]
}
 8000e94:	bf00      	nop
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	40021000 	.word	0x40021000

08000ea4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000ea8:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <LL_RCC_GetSysClkSource+0x18>)
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f003 030c 	and.w	r3, r3, #12
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	40021000 	.word	0x40021000

08000ec0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <LL_RCC_SetAHBPrescaler+0x24>)
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ed0:	4904      	ldr	r1, [pc, #16]	; (8000ee4 <LL_RCC_SetAHBPrescaler+0x24>)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	604b      	str	r3, [r1, #4]
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	40021000 	.word	0x40021000

08000ee8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000ef8:	4904      	ldr	r1, [pc, #16]	; (8000f0c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	604b      	str	r3, [r1, #4]
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	40021000 	.word	0x40021000

08000f10 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000f20:	4904      	ldr	r1, [pc, #16]	; (8000f34 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	604b      	str	r3, [r1, #4]
}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	40021000 	.word	0x40021000

08000f38 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000f40:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f42:	695a      	ldr	r2, [r3, #20]
 8000f44:	4907      	ldr	r1, [pc, #28]	; (8000f64 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000f4c:	4b05      	ldr	r3, [pc, #20]	; (8000f64 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f4e:	695a      	ldr	r2, [r3, #20]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4013      	ands	r3, r2
 8000f54:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f56:	68fb      	ldr	r3, [r7, #12]
}
 8000f58:	bf00      	nop
 8000f5a:	3714      	adds	r7, #20
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	40021000 	.word	0x40021000

08000f68 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000f70:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000f72:	69da      	ldr	r2, [r3, #28]
 8000f74:	4907      	ldr	r1, [pc, #28]	; (8000f94 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000f7c:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000f7e:	69da      	ldr	r2, [r3, #28]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4013      	ands	r3, r2
 8000f84:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f86:	68fb      	ldr	r3, [r7, #12]
}
 8000f88:	bf00      	nop
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	40021000 	.word	0x40021000

08000f98 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000fa0:	4b08      	ldr	r3, [pc, #32]	; (8000fc4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000fa2:	699a      	ldr	r2, [r3, #24]
 8000fa4:	4907      	ldr	r1, [pc, #28]	; (8000fc4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000fac:	4b05      	ldr	r3, [pc, #20]	; (8000fc4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000fae:	699a      	ldr	r2, [r3, #24]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
}
 8000fb8:	bf00      	nop
 8000fba:	3714      	adds	r7, #20
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	40021000 	.word	0x40021000

08000fc8 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <LL_FLASH_SetLatency+0x24>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f023 0207 	bic.w	r2, r3, #7
 8000fd8:	4904      	ldr	r1, [pc, #16]	; (8000fec <LL_FLASH_SetLatency+0x24>)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	600b      	str	r3, [r1, #0]
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	40022000 	.word	0x40022000

08000ff0 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000ff4:	4b04      	ldr	r3, [pc, #16]	; (8001008 <LL_FLASH_GetLatency+0x18>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f003 0307 	and.w	r3, r3, #7
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	40022000 	.word	0x40022000

0800100c <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	601a      	str	r2, [r3, #0]
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	f043 0201 	orr.w	r2, r3, #1
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	60da      	str	r2, [r3, #12]
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f043 0201 	orr.w	r2, r3, #1
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	601a      	str	r2, [r3, #0]
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	609a      	str	r2, [r3, #8]
}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	609a      	str	r2, [r3, #8]
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	683a      	ldr	r2, [r7, #0]
 80010c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <my_memcpy>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void my_memcpy(char *from, uint8_t *to, uint8_t *copied,uint8_t max){
 80010d4:	b480      	push	{r7}
 80010d6:	b087      	sub	sp, #28
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
 80010e0:	70fb      	strb	r3, [r7, #3]
	uint8_t cnt;
	for (cnt=0;cnt<max;cnt++){
 80010e2:	2300      	movs	r3, #0
 80010e4:	75fb      	strb	r3, [r7, #23]
 80010e6:	e010      	b.n	800110a <my_memcpy+0x36>
		*to=*from;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	781a      	ldrb	r2, [r3, #0]
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	701a      	strb	r2, [r3, #0]

		if(*from == '\0'){
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d00d      	beq.n	8001114 <my_memcpy+0x40>
			break;
			}
		else{
			to+=1;from+=1;
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	3301      	adds	r3, #1
 80010fc:	60bb      	str	r3, [r7, #8]
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	3301      	adds	r3, #1
 8001102:	60fb      	str	r3, [r7, #12]
	for (cnt=0;cnt<max;cnt++){
 8001104:	7dfb      	ldrb	r3, [r7, #23]
 8001106:	3301      	adds	r3, #1
 8001108:	75fb      	strb	r3, [r7, #23]
 800110a:	7dfa      	ldrb	r2, [r7, #23]
 800110c:	78fb      	ldrb	r3, [r7, #3]
 800110e:	429a      	cmp	r2, r3
 8001110:	d3ea      	bcc.n	80010e8 <my_memcpy+0x14>
 8001112:	e000      	b.n	8001116 <my_memcpy+0x42>
			break;
 8001114:	bf00      	nop
			}
		}
	*copied=cnt;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	7dfa      	ldrb	r2, [r7, #23]
 800111a:	701a      	strb	r2, [r3, #0]
}
 800111c:	bf00      	nop
 800111e:	371c      	adds	r7, #28
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <one_sec_delayed>:

void one_sec_delayed(void){
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
	//LL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
	uint8_t cnt=0;
 800112e:	2300      	movs	r3, #0
 8001130:	71fb      	strb	r3, [r7, #7]
	my_memcpy("Buffer capacity: ",tx_buffer, &cnt, max_tx_buffer);
 8001132:	1dfa      	adds	r2, r7, #7
 8001134:	2320      	movs	r3, #32
 8001136:	490a      	ldr	r1, [pc, #40]	; (8001160 <one_sec_delayed+0x38>)
 8001138:	480a      	ldr	r0, [pc, #40]	; (8001164 <one_sec_delayed+0x3c>)
 800113a:	f7ff ffcb 	bl	80010d4 <my_memcpy>

	stage_tx_buff=1;
 800113e:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <one_sec_delayed+0x40>)
 8001140:	2201      	movs	r2, #1
 8001142:	701a      	strb	r2, [r3, #0]
	DMA1_Channel7->CNDTR=cnt;
 8001144:	79fa      	ldrb	r2, [r7, #7]
 8001146:	4b09      	ldr	r3, [pc, #36]	; (800116c <one_sec_delayed+0x44>)
 8001148:	605a      	str	r2, [r3, #4]

	DMA1_Channel7->CCR |= DMA_CCR_EN;
 800114a:	4b08      	ldr	r3, [pc, #32]	; (800116c <one_sec_delayed+0x44>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a07      	ldr	r2, [pc, #28]	; (800116c <one_sec_delayed+0x44>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6013      	str	r3, [r2, #0]
}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	2000012c 	.word	0x2000012c
 8001164:	08002834 	.word	0x08002834
 8001168:	20000020 	.word	0x20000020
 800116c:	40020080 	.word	0x40020080

08001170 <dec_to_char>:

void dec_to_char(uint16_t num, uint8_t *str, uint8_t *size){
 8001170:	b480      	push	{r7}
 8001172:	b087      	sub	sp, #28
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
 800117c:	81fb      	strh	r3, [r7, #14]
	uint8_t cnt=0;
 800117e:	2300      	movs	r3, #0
 8001180:	75fb      	strb	r3, [r7, #23]
	if (num <= 9)
 8001182:	89fb      	ldrh	r3, [r7, #14]
 8001184:	2b09      	cmp	r3, #9
 8001186:	d80d      	bhi.n	80011a4 <dec_to_char+0x34>
		{*str=num+'0';*(str+1)='\0';*size=1;return;}
 8001188:	89fb      	ldrh	r3, [r7, #14]
 800118a:	b2db      	uxtb	r3, r3
 800118c:	3330      	adds	r3, #48	; 0x30
 800118e:	b2da      	uxtb	r2, r3
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	701a      	strb	r2, [r3, #0]
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	3301      	adds	r3, #1
 8001198:	2200      	movs	r2, #0
 800119a:	701a      	strb	r2, [r3, #0]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2201      	movs	r2, #1
 80011a0:	701a      	strb	r2, [r3, #0]
 80011a2:	e06b      	b.n	800127c <dec_to_char+0x10c>
	if (num <= 99)
 80011a4:	89fb      	ldrh	r3, [r7, #14]
 80011a6:	2b63      	cmp	r3, #99	; 0x63
 80011a8:	d81c      	bhi.n	80011e4 <dec_to_char+0x74>
		{
		do{
			num-=10;
 80011aa:	89fb      	ldrh	r3, [r7, #14]
 80011ac:	3b0a      	subs	r3, #10
 80011ae:	81fb      	strh	r3, [r7, #14]
			cnt++;
 80011b0:	7dfb      	ldrb	r3, [r7, #23]
 80011b2:	3301      	adds	r3, #1
 80011b4:	75fb      	strb	r3, [r7, #23]
		}while(num>=10);
 80011b6:	89fb      	ldrh	r3, [r7, #14]
 80011b8:	2b09      	cmp	r3, #9
 80011ba:	d8f6      	bhi.n	80011aa <dec_to_char+0x3a>
		*str=cnt+'0';*(str+1)=num+'0';*(str+2)='\0';*size=2;return;
 80011bc:	7dfb      	ldrb	r3, [r7, #23]
 80011be:	3330      	adds	r3, #48	; 0x30
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	701a      	strb	r2, [r3, #0]
 80011c6:	89fb      	ldrh	r3, [r7, #14]
 80011c8:	b2da      	uxtb	r2, r3
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	3301      	adds	r3, #1
 80011ce:	3230      	adds	r2, #48	; 0x30
 80011d0:	b2d2      	uxtb	r2, r2
 80011d2:	701a      	strb	r2, [r3, #0]
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	3302      	adds	r3, #2
 80011d8:	2200      	movs	r2, #0
 80011da:	701a      	strb	r2, [r3, #0]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2202      	movs	r2, #2
 80011e0:	701a      	strb	r2, [r3, #0]
 80011e2:	e04b      	b.n	800127c <dec_to_char+0x10c>
		}
	if (num <= 999)
 80011e4:	89fb      	ldrh	r3, [r7, #14]
 80011e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011ea:	d230      	bcs.n	800124e <dec_to_char+0xde>
		{
		do{
			num -=100;
 80011ec:	89fb      	ldrh	r3, [r7, #14]
 80011ee:	3b64      	subs	r3, #100	; 0x64
 80011f0:	81fb      	strh	r3, [r7, #14]
			cnt++;
 80011f2:	7dfb      	ldrb	r3, [r7, #23]
 80011f4:	3301      	adds	r3, #1
 80011f6:	75fb      	strb	r3, [r7, #23]
		}while(num>=100);
 80011f8:	89fb      	ldrh	r3, [r7, #14]
 80011fa:	2b63      	cmp	r3, #99	; 0x63
 80011fc:	d8f6      	bhi.n	80011ec <dec_to_char+0x7c>
		*str=cnt+'0';cnt=0;
 80011fe:	7dfb      	ldrb	r3, [r7, #23]
 8001200:	3330      	adds	r3, #48	; 0x30
 8001202:	b2da      	uxtb	r2, r3
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	701a      	strb	r2, [r3, #0]
 8001208:	2300      	movs	r3, #0
 800120a:	75fb      	strb	r3, [r7, #23]
		if (num>=10)
 800120c:	89fb      	ldrh	r3, [r7, #14]
 800120e:	2b09      	cmp	r3, #9
 8001210:	d908      	bls.n	8001224 <dec_to_char+0xb4>
			do{
				num-=10;
 8001212:	89fb      	ldrh	r3, [r7, #14]
 8001214:	3b0a      	subs	r3, #10
 8001216:	81fb      	strh	r3, [r7, #14]
				cnt++;
 8001218:	7dfb      	ldrb	r3, [r7, #23]
 800121a:	3301      	adds	r3, #1
 800121c:	75fb      	strb	r3, [r7, #23]
			}while(num>=10);
 800121e:	89fb      	ldrh	r3, [r7, #14]
 8001220:	2b09      	cmp	r3, #9
 8001222:	d8f6      	bhi.n	8001212 <dec_to_char+0xa2>
		*(str+1)=cnt+'0';*(str+2)=num+'0';*(str+3)='\0';*size=3;return;
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	3301      	adds	r3, #1
 8001228:	7dfa      	ldrb	r2, [r7, #23]
 800122a:	3230      	adds	r2, #48	; 0x30
 800122c:	b2d2      	uxtb	r2, r2
 800122e:	701a      	strb	r2, [r3, #0]
 8001230:	89fb      	ldrh	r3, [r7, #14]
 8001232:	b2da      	uxtb	r2, r3
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	3302      	adds	r3, #2
 8001238:	3230      	adds	r2, #48	; 0x30
 800123a:	b2d2      	uxtb	r2, r2
 800123c:	701a      	strb	r2, [r3, #0]
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	3303      	adds	r3, #3
 8001242:	2200      	movs	r2, #0
 8001244:	701a      	strb	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2203      	movs	r2, #3
 800124a:	701a      	strb	r2, [r3, #0]
 800124c:	e016      	b.n	800127c <dec_to_char+0x10c>
		}
	else {
		*str=cnt+'B';*(str+1)=num+'I';*(str+2)='G';*(str+3)='\0';*size=3;
 800124e:	7dfb      	ldrb	r3, [r7, #23]
 8001250:	3342      	adds	r3, #66	; 0x42
 8001252:	b2da      	uxtb	r2, r3
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	701a      	strb	r2, [r3, #0]
 8001258:	89fb      	ldrh	r3, [r7, #14]
 800125a:	b2da      	uxtb	r2, r3
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	3301      	adds	r3, #1
 8001260:	3249      	adds	r2, #73	; 0x49
 8001262:	b2d2      	uxtb	r2, r2
 8001264:	701a      	strb	r2, [r3, #0]
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	3302      	adds	r3, #2
 800126a:	2247      	movs	r2, #71	; 0x47
 800126c:	701a      	strb	r2, [r3, #0]
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	3303      	adds	r3, #3
 8001272:	2200      	movs	r2, #0
 8001274:	701a      	strb	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2203      	movs	r2, #3
 800127a:	701a      	strb	r2, [r3, #0]
	}
}
 800127c:	371c      	adds	r7, #28
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
	...

08001288 <float_to_char>:

void float_to_char(double num, uint8_t *str, uint8_t *size){
 8001288:	b590      	push	{r4, r7, lr}
 800128a:	b089      	sub	sp, #36	; 0x24
 800128c:	af00      	add	r7, sp, #0
 800128e:	ed87 0b02 	vstr	d0, [r7, #8]
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
	double temp;uint8_t a;
	if(num < 1.0)
 8001296:	f04f 0200 	mov.w	r2, #0
 800129a:	4b87      	ldr	r3, [pc, #540]	; (80014b8 <float_to_char+0x230>)
 800129c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012a0:	f7ff fbc0 	bl	8000a24 <__aeabi_dcmplt>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d025      	beq.n	80012f6 <float_to_char+0x6e>
		{temp=10.0*num/1.0;
 80012aa:	f04f 0200 	mov.w	r2, #0
 80012ae:	4b83      	ldr	r3, [pc, #524]	; (80014bc <float_to_char+0x234>)
 80012b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012b4:	f7ff f944 	bl	8000540 <__aeabi_dmul>
 80012b8:	4603      	mov	r3, r0
 80012ba:	460c      	mov	r4, r1
 80012bc:	e9c7 3406 	strd	r3, r4, [r7, #24]
		a=(uint8_t)temp;
 80012c0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80012c4:	f7ff fbd6 	bl	8000a74 <__aeabi_d2uiz>
 80012c8:	4603      	mov	r3, r0
 80012ca:	75fb      	strb	r3, [r7, #23]
		*str='0';*(str+1)='.';*(str+2)=a+'0';*(str+3)='\0';*size=3;return;}
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2230      	movs	r2, #48	; 0x30
 80012d0:	701a      	strb	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	3301      	adds	r3, #1
 80012d6:	222e      	movs	r2, #46	; 0x2e
 80012d8:	701a      	strb	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	3302      	adds	r3, #2
 80012de:	7dfa      	ldrb	r2, [r7, #23]
 80012e0:	3230      	adds	r2, #48	; 0x30
 80012e2:	b2d2      	uxtb	r2, r2
 80012e4:	701a      	strb	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	3303      	adds	r3, #3
 80012ea:	2200      	movs	r2, #0
 80012ec:	701a      	strb	r2, [r3, #0]
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	2203      	movs	r2, #3
 80012f2:	701a      	strb	r2, [r3, #0]
 80012f4:	e0dd      	b.n	80014b2 <float_to_char+0x22a>
	if (num < 10.0){
 80012f6:	f04f 0200 	mov.w	r2, #0
 80012fa:	4b70      	ldr	r3, [pc, #448]	; (80014bc <float_to_char+0x234>)
 80012fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001300:	f7ff fb90 	bl	8000a24 <__aeabi_dcmplt>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d041      	beq.n	800138e <float_to_char+0x106>
		temp=num/1.0;
 800130a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800130e:	e9c7 3406 	strd	r3, r4, [r7, #24]
		a=(uint8_t)temp;
 8001312:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001316:	f7ff fbad 	bl	8000a74 <__aeabi_d2uiz>
 800131a:	4603      	mov	r3, r0
 800131c:	75fb      	strb	r3, [r7, #23]
		*str=a+'0';*(str+1)='.';
 800131e:	7dfb      	ldrb	r3, [r7, #23]
 8001320:	3330      	adds	r3, #48	; 0x30
 8001322:	b2da      	uxtb	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	701a      	strb	r2, [r3, #0]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3301      	adds	r3, #1
 800132c:	222e      	movs	r2, #46	; 0x2e
 800132e:	701a      	strb	r2, [r3, #0]
		num-=a*1.0;
 8001330:	7dfb      	ldrb	r3, [r7, #23]
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff f89a 	bl	800046c <__aeabi_i2d>
 8001338:	4603      	mov	r3, r0
 800133a:	460c      	mov	r4, r1
 800133c:	461a      	mov	r2, r3
 800133e:	4623      	mov	r3, r4
 8001340:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001344:	f7fe ff44 	bl	80001d0 <__aeabi_dsub>
 8001348:	4603      	mov	r3, r0
 800134a:	460c      	mov	r4, r1
 800134c:	e9c7 3402 	strd	r3, r4, [r7, #8]
		temp=10.0*num/1.0;
 8001350:	f04f 0200 	mov.w	r2, #0
 8001354:	4b59      	ldr	r3, [pc, #356]	; (80014bc <float_to_char+0x234>)
 8001356:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800135a:	f7ff f8f1 	bl	8000540 <__aeabi_dmul>
 800135e:	4603      	mov	r3, r0
 8001360:	460c      	mov	r4, r1
 8001362:	e9c7 3406 	strd	r3, r4, [r7, #24]
		a=(uint8_t)temp;
 8001366:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800136a:	f7ff fb83 	bl	8000a74 <__aeabi_d2uiz>
 800136e:	4603      	mov	r3, r0
 8001370:	75fb      	strb	r3, [r7, #23]
		*(str+2)=a+'0';*(str+3)='\0';*size=3;return;}
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	3302      	adds	r3, #2
 8001376:	7dfa      	ldrb	r2, [r7, #23]
 8001378:	3230      	adds	r2, #48	; 0x30
 800137a:	b2d2      	uxtb	r2, r2
 800137c:	701a      	strb	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	3303      	adds	r3, #3
 8001382:	2200      	movs	r2, #0
 8001384:	701a      	strb	r2, [r3, #0]
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	2203      	movs	r2, #3
 800138a:	701a      	strb	r2, [r3, #0]
 800138c:	e091      	b.n	80014b2 <float_to_char+0x22a>
	if (num < 100.0){
 800138e:	f04f 0200 	mov.w	r2, #0
 8001392:	4b4b      	ldr	r3, [pc, #300]	; (80014c0 <float_to_char+0x238>)
 8001394:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001398:	f7ff fb44 	bl	8000a24 <__aeabi_dcmplt>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d06d      	beq.n	800147e <float_to_char+0x1f6>
		temp=num/10.0;
 80013a2:	f04f 0200 	mov.w	r2, #0
 80013a6:	4b45      	ldr	r3, [pc, #276]	; (80014bc <float_to_char+0x234>)
 80013a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013ac:	f7ff f9f2 	bl	8000794 <__aeabi_ddiv>
 80013b0:	4603      	mov	r3, r0
 80013b2:	460c      	mov	r4, r1
 80013b4:	e9c7 3406 	strd	r3, r4, [r7, #24]
		a=(uint8_t)temp;
 80013b8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80013bc:	f7ff fb5a 	bl	8000a74 <__aeabi_d2uiz>
 80013c0:	4603      	mov	r3, r0
 80013c2:	75fb      	strb	r3, [r7, #23]
		*str=a+'0';
 80013c4:	7dfb      	ldrb	r3, [r7, #23]
 80013c6:	3330      	adds	r3, #48	; 0x30
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	701a      	strb	r2, [r3, #0]
		num-=a*10.0;
 80013ce:	7dfb      	ldrb	r3, [r7, #23]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff f84b 	bl	800046c <__aeabi_i2d>
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	4b38      	ldr	r3, [pc, #224]	; (80014bc <float_to_char+0x234>)
 80013dc:	f7ff f8b0 	bl	8000540 <__aeabi_dmul>
 80013e0:	4603      	mov	r3, r0
 80013e2:	460c      	mov	r4, r1
 80013e4:	461a      	mov	r2, r3
 80013e6:	4623      	mov	r3, r4
 80013e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013ec:	f7fe fef0 	bl	80001d0 <__aeabi_dsub>
 80013f0:	4603      	mov	r3, r0
 80013f2:	460c      	mov	r4, r1
 80013f4:	e9c7 3402 	strd	r3, r4, [r7, #8]
		temp=num/1.0;
 80013f8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80013fc:	e9c7 3406 	strd	r3, r4, [r7, #24]
		a=(uint8_t)temp;
 8001400:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001404:	f7ff fb36 	bl	8000a74 <__aeabi_d2uiz>
 8001408:	4603      	mov	r3, r0
 800140a:	75fb      	strb	r3, [r7, #23]
		*(str+1)=a+'0';*(str+2)='.';
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3301      	adds	r3, #1
 8001410:	7dfa      	ldrb	r2, [r7, #23]
 8001412:	3230      	adds	r2, #48	; 0x30
 8001414:	b2d2      	uxtb	r2, r2
 8001416:	701a      	strb	r2, [r3, #0]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3302      	adds	r3, #2
 800141c:	222e      	movs	r2, #46	; 0x2e
 800141e:	701a      	strb	r2, [r3, #0]
		num-=a*1.0;
 8001420:	7dfb      	ldrb	r3, [r7, #23]
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff f822 	bl	800046c <__aeabi_i2d>
 8001428:	4603      	mov	r3, r0
 800142a:	460c      	mov	r4, r1
 800142c:	461a      	mov	r2, r3
 800142e:	4623      	mov	r3, r4
 8001430:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001434:	f7fe fecc 	bl	80001d0 <__aeabi_dsub>
 8001438:	4603      	mov	r3, r0
 800143a:	460c      	mov	r4, r1
 800143c:	e9c7 3402 	strd	r3, r4, [r7, #8]
		temp=10.0*num/1.0;
 8001440:	f04f 0200 	mov.w	r2, #0
 8001444:	4b1d      	ldr	r3, [pc, #116]	; (80014bc <float_to_char+0x234>)
 8001446:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800144a:	f7ff f879 	bl	8000540 <__aeabi_dmul>
 800144e:	4603      	mov	r3, r0
 8001450:	460c      	mov	r4, r1
 8001452:	e9c7 3406 	strd	r3, r4, [r7, #24]
		a=(uint8_t)temp;
 8001456:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800145a:	f7ff fb0b 	bl	8000a74 <__aeabi_d2uiz>
 800145e:	4603      	mov	r3, r0
 8001460:	75fb      	strb	r3, [r7, #23]
		*(str+3)=a+'0';*(str+4)='\0';*size=4;return;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	3303      	adds	r3, #3
 8001466:	7dfa      	ldrb	r2, [r7, #23]
 8001468:	3230      	adds	r2, #48	; 0x30
 800146a:	b2d2      	uxtb	r2, r2
 800146c:	701a      	strb	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	3304      	adds	r3, #4
 8001472:	2200      	movs	r2, #0
 8001474:	701a      	strb	r2, [r3, #0]
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	2204      	movs	r2, #4
 800147a:	701a      	strb	r2, [r3, #0]
 800147c:	e019      	b.n	80014b2 <float_to_char+0x22a>
		}
	else{*str='1';*(str+1)='0';*(str+2)='0';*(str+3)='.';*(str+4)='0';*(str+5)='\0';*size=5;}
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2231      	movs	r2, #49	; 0x31
 8001482:	701a      	strb	r2, [r3, #0]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	3301      	adds	r3, #1
 8001488:	2230      	movs	r2, #48	; 0x30
 800148a:	701a      	strb	r2, [r3, #0]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3302      	adds	r3, #2
 8001490:	2230      	movs	r2, #48	; 0x30
 8001492:	701a      	strb	r2, [r3, #0]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3303      	adds	r3, #3
 8001498:	222e      	movs	r2, #46	; 0x2e
 800149a:	701a      	strb	r2, [r3, #0]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3304      	adds	r3, #4
 80014a0:	2230      	movs	r2, #48	; 0x30
 80014a2:	701a      	strb	r2, [r3, #0]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	3305      	adds	r3, #5
 80014a8:	2200      	movs	r2, #0
 80014aa:	701a      	strb	r2, [r3, #0]
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	2205      	movs	r2, #5
 80014b0:	701a      	strb	r2, [r3, #0]
}
 80014b2:	3724      	adds	r7, #36	; 0x24
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd90      	pop	{r4, r7, pc}
 80014b8:	3ff00000 	.word	0x3ff00000
 80014bc:	40240000 	.word	0x40240000
 80014c0:	40590000 	.word	0x40590000
 80014c4:	00000000 	.word	0x00000000

080014c8 <define_next_str>:

void define_next_str(void){
 80014c8:	b590      	push	{r4, r7, lr}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
	uint8_t cnt=0;
 80014ce:	2300      	movs	r3, #0
 80014d0:	71fb      	strb	r3, [r7, #7]
	if (stage_tx_buff != 0){
 80014d2:	4b43      	ldr	r3, [pc, #268]	; (80015e0 <define_next_str+0x118>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d078      	beq.n	80015cc <define_next_str+0x104>
		stage_tx_buff++;
 80014da:	4b41      	ldr	r3, [pc, #260]	; (80015e0 <define_next_str+0x118>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	3301      	adds	r3, #1
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	4b3f      	ldr	r3, [pc, #252]	; (80015e0 <define_next_str+0x118>)
 80014e4:	701a      	strb	r2, [r3, #0]
		if (stage_tx_buff == 7)
 80014e6:	4b3e      	ldr	r3, [pc, #248]	; (80015e0 <define_next_str+0x118>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	2b07      	cmp	r3, #7
 80014ec:	d103      	bne.n	80014f6 <define_next_str+0x2e>
			{stage_tx_buff=0;}
 80014ee:	4b3c      	ldr	r3, [pc, #240]	; (80015e0 <define_next_str+0x118>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	701a      	strb	r2, [r3, #0]
			DMA1_Channel7->CCR |= DMA_CCR_EN;
		}
	}


}
 80014f4:	e06a      	b.n	80015cc <define_next_str+0x104>
			switch(stage_tx_buff){
 80014f6:	4b3a      	ldr	r3, [pc, #232]	; (80015e0 <define_next_str+0x118>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	3b02      	subs	r3, #2
 80014fc:	2b04      	cmp	r3, #4
 80014fe:	d85c      	bhi.n	80015ba <define_next_str+0xf2>
 8001500:	a201      	add	r2, pc, #4	; (adr r2, 8001508 <define_next_str+0x40>)
 8001502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001506:	bf00      	nop
 8001508:	0800151d 	.word	0x0800151d
 800150c:	0800152d 	.word	0x0800152d
 8001510:	0800153b 	.word	0x0800153b
 8001514:	08001553 	.word	0x08001553
 8001518:	08001561 	.word	0x08001561
			case 2: {dec_to_char((uint16_t)max_rx_buffer, tx_buffer, &cnt);break;}//
 800151c:	1dfb      	adds	r3, r7, #7
 800151e:	461a      	mov	r2, r3
 8001520:	4930      	ldr	r1, [pc, #192]	; (80015e4 <define_next_str+0x11c>)
 8001522:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001526:	f7ff fe23 	bl	8001170 <dec_to_char>
 800152a:	e046      	b.n	80015ba <define_next_str+0xf2>
			case 3: {my_memcpy(" bytes, occupied memory: ",tx_buffer, &cnt, max_tx_buffer);break;}// bytes, occupied memory:
 800152c:	1dfa      	adds	r2, r7, #7
 800152e:	2320      	movs	r3, #32
 8001530:	492c      	ldr	r1, [pc, #176]	; (80015e4 <define_next_str+0x11c>)
 8001532:	482d      	ldr	r0, [pc, #180]	; (80015e8 <define_next_str+0x120>)
 8001534:	f7ff fdce 	bl	80010d4 <my_memcpy>
 8001538:	e03f      	b.n	80015ba <define_next_str+0xf2>
			case 4: {dec_to_char(max_rx_buffer-DMA1_Channel6->CNDTR, tx_buffer, &cnt);break;}//
 800153a:	4b2c      	ldr	r3, [pc, #176]	; (80015ec <define_next_str+0x124>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	b29b      	uxth	r3, r3
 8001540:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001544:	b29b      	uxth	r3, r3
 8001546:	1dfa      	adds	r2, r7, #7
 8001548:	4926      	ldr	r1, [pc, #152]	; (80015e4 <define_next_str+0x11c>)
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff fe10 	bl	8001170 <dec_to_char>
 8001550:	e033      	b.n	80015ba <define_next_str+0xf2>
			case 5: {my_memcpy(" bytes, load [in %]: ",tx_buffer, &cnt, max_tx_buffer);break;}// bytes, load [in %]:
 8001552:	1dfa      	adds	r2, r7, #7
 8001554:	2320      	movs	r3, #32
 8001556:	4923      	ldr	r1, [pc, #140]	; (80015e4 <define_next_str+0x11c>)
 8001558:	4825      	ldr	r0, [pc, #148]	; (80015f0 <define_next_str+0x128>)
 800155a:	f7ff fdbb 	bl	80010d4 <my_memcpy>
 800155e:	e02c      	b.n	80015ba <define_next_str+0xf2>
			case 6: {float_to_char(100.0*(max_rx_buffer-DMA1_Channel6->CNDTR)/(max_rx_buffer_float-1.0) ,tx_buffer, &cnt);
 8001560:	4b22      	ldr	r3, [pc, #136]	; (80015ec <define_next_str+0x124>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001568:	4618      	mov	r0, r3
 800156a:	f7fe ff6f 	bl	800044c <__aeabi_ui2d>
 800156e:	f04f 0200 	mov.w	r2, #0
 8001572:	4b20      	ldr	r3, [pc, #128]	; (80015f4 <define_next_str+0x12c>)
 8001574:	f7fe ffe4 	bl	8000540 <__aeabi_dmul>
 8001578:	4603      	mov	r3, r0
 800157a:	460c      	mov	r4, r1
 800157c:	4618      	mov	r0, r3
 800157e:	4621      	mov	r1, r4
 8001580:	a315      	add	r3, pc, #84	; (adr r3, 80015d8 <define_next_str+0x110>)
 8001582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001586:	f7ff f905 	bl	8000794 <__aeabi_ddiv>
 800158a:	4603      	mov	r3, r0
 800158c:	460c      	mov	r4, r1
 800158e:	ec44 3b17 	vmov	d7, r3, r4
 8001592:	1dfb      	adds	r3, r7, #7
 8001594:	4619      	mov	r1, r3
 8001596:	4813      	ldr	r0, [pc, #76]	; (80015e4 <define_next_str+0x11c>)
 8001598:	eeb0 0a47 	vmov.f32	s0, s14
 800159c:	eef0 0a67 	vmov.f32	s1, s15
 80015a0:	f7ff fe72 	bl	8001288 <float_to_char>
			*(tx_buffer+cnt)='\r';cnt++;break;}
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	461a      	mov	r2, r3
 80015a8:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <define_next_str+0x11c>)
 80015aa:	4413      	add	r3, r2
 80015ac:	220d      	movs	r2, #13
 80015ae:	701a      	strb	r2, [r3, #0]
 80015b0:	79fb      	ldrb	r3, [r7, #7]
 80015b2:	3301      	adds	r3, #1
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	71fb      	strb	r3, [r7, #7]
 80015b8:	bf00      	nop
			DMA1_Channel7->CNDTR=cnt;
 80015ba:	79fa      	ldrb	r2, [r7, #7]
 80015bc:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <define_next_str+0x130>)
 80015be:	605a      	str	r2, [r3, #4]
			DMA1_Channel7->CCR |= DMA_CCR_EN;
 80015c0:	4b0d      	ldr	r3, [pc, #52]	; (80015f8 <define_next_str+0x130>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a0c      	ldr	r2, [pc, #48]	; (80015f8 <define_next_str+0x130>)
 80015c6:	f043 0301 	orr.w	r3, r3, #1
 80015ca:	6013      	str	r3, [r2, #0]
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd90      	pop	{r4, r7, pc}
 80015d4:	f3af 8000 	nop.w
 80015d8:	00000000 	.word	0x00000000
 80015dc:	406fe000 	.word	0x406fe000
 80015e0:	20000020 	.word	0x20000020
 80015e4:	2000012c 	.word	0x2000012c
 80015e8:	08002848 	.word	0x08002848
 80015ec:	4002006c 	.word	0x4002006c
 80015f0:	08002864 	.word	0x08002864
 80015f4:	40590000 	.word	0x40590000
 80015f8:	40020080 	.word	0x40020080

080015fc <proccesDmaData>:

void proccesDmaData(uint8_t sign)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	71fb      	strb	r3, [r7, #7]
	/* Process received data */
	int32_t cnt=search_from;
 8001606:	4b1d      	ldr	r3, [pc, #116]	; (800167c <proccesDmaData+0x80>)
 8001608:	881b      	ldrh	r3, [r3, #0]
 800160a:	60fb      	str	r3, [r7, #12]
	int32_t MAX=(int32_t)max_rx_buffer-1-(int32_t)search_to-1;
 800160c:	4b1c      	ldr	r3, [pc, #112]	; (8001680 <proccesDmaData+0x84>)
 800160e:	881b      	ldrh	r3, [r3, #0]
 8001610:	f1c3 03fe 	rsb	r3, r3, #254	; 0xfe
 8001614:	60bb      	str	r3, [r7, #8]
	for (;cnt<MAX ;cnt++)
 8001616:	e027      	b.n	8001668 <proccesDmaData+0x6c>
		if( ( *(rx_buffer+cnt)>='A' ) && ( *(rx_buffer+cnt)<='Z' ) ){
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	4a1a      	ldr	r2, [pc, #104]	; (8001684 <proccesDmaData+0x88>)
 800161c:	4413      	add	r3, r2
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b40      	cmp	r3, #64	; 0x40
 8001622:	d90c      	bls.n	800163e <proccesDmaData+0x42>
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	4a17      	ldr	r2, [pc, #92]	; (8001684 <proccesDmaData+0x88>)
 8001628:	4413      	add	r3, r2
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b5a      	cmp	r3, #90	; 0x5a
 800162e:	d806      	bhi.n	800163e <proccesDmaData+0x42>
			Big_capitals++;}
 8001630:	4b15      	ldr	r3, [pc, #84]	; (8001688 <proccesDmaData+0x8c>)
 8001632:	881b      	ldrh	r3, [r3, #0]
 8001634:	3301      	adds	r3, #1
 8001636:	b29a      	uxth	r2, r3
 8001638:	4b13      	ldr	r3, [pc, #76]	; (8001688 <proccesDmaData+0x8c>)
 800163a:	801a      	strh	r2, [r3, #0]
 800163c:	e011      	b.n	8001662 <proccesDmaData+0x66>
		else if ( ( *(rx_buffer+cnt)>='a' ) && ( *(rx_buffer+cnt)<='z' ) ){
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	4a10      	ldr	r2, [pc, #64]	; (8001684 <proccesDmaData+0x88>)
 8001642:	4413      	add	r3, r2
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	2b60      	cmp	r3, #96	; 0x60
 8001648:	d90b      	bls.n	8001662 <proccesDmaData+0x66>
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	4a0d      	ldr	r2, [pc, #52]	; (8001684 <proccesDmaData+0x88>)
 800164e:	4413      	add	r3, r2
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b7a      	cmp	r3, #122	; 0x7a
 8001654:	d805      	bhi.n	8001662 <proccesDmaData+0x66>
			small_capitals++;}
 8001656:	4b0d      	ldr	r3, [pc, #52]	; (800168c <proccesDmaData+0x90>)
 8001658:	881b      	ldrh	r3, [r3, #0]
 800165a:	3301      	adds	r3, #1
 800165c:	b29a      	uxth	r2, r3
 800165e:	4b0b      	ldr	r3, [pc, #44]	; (800168c <proccesDmaData+0x90>)
 8001660:	801a      	strh	r2, [r3, #0]
	for (;cnt<MAX ;cnt++)
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	3301      	adds	r3, #1
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fa      	ldr	r2, [r7, #12]
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	429a      	cmp	r2, r3
 800166e:	dbd3      	blt.n	8001618 <proccesDmaData+0x1c>

		// type your algorithm here:
}
 8001670:	bf00      	nop
 8001672:	3714      	adds	r7, #20
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	20000024 	.word	0x20000024
 8001680:	20000022 	.word	0x20000022
 8001684:	2000002c 	.word	0x2000002c
 8001688:	20000026 	.word	0x20000026
 800168c:	20000028 	.word	0x20000028

08001690 <USART2_CheckDmaReception>:

void USART2_CheckDmaReception(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
	//type your implementation here
	if (mode & mode_rx_start_of_string){
 8001694:	4b5a      	ldr	r3, [pc, #360]	; (8001800 <USART2_CheckDmaReception+0x170>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	f003 0310 	and.w	r3, r3, #16
 800169c:	2b00      	cmp	r3, #0
 800169e:	d026      	beq.n	80016ee <USART2_CheckDmaReception+0x5e>
		if ((mode & mode_founded_dollar )==0x0){
 80016a0:	4b57      	ldr	r3, [pc, #348]	; (8001800 <USART2_CheckDmaReception+0x170>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d120      	bne.n	80016ee <USART2_CheckDmaReception+0x5e>
			// first cross before dollar
			mode |=mode_founded_cross;
 80016ac:	4b54      	ldr	r3, [pc, #336]	; (8001800 <USART2_CheckDmaReception+0x170>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	4b52      	ldr	r3, [pc, #328]	; (8001800 <USART2_CheckDmaReception+0x170>)
 80016b8:	701a      	strb	r2, [r3, #0]

			DMA1_Channel6->CCR &=~(DMA_CCR_EN);
 80016ba:	4b52      	ldr	r3, [pc, #328]	; (8001804 <USART2_CheckDmaReception+0x174>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a51      	ldr	r2, [pc, #324]	; (8001804 <USART2_CheckDmaReception+0x174>)
 80016c0:	f023 0301 	bic.w	r3, r3, #1
 80016c4:	6013      	str	r3, [r2, #0]
			DMA1_Channel6->CNDTR=max_rx_buffer;
 80016c6:	4b4f      	ldr	r3, [pc, #316]	; (8001804 <USART2_CheckDmaReception+0x174>)
 80016c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016cc:	605a      	str	r2, [r3, #4]
			DMA1_Channel6->CCR |=DMA_CCR_EN;
 80016ce:	4b4d      	ldr	r3, [pc, #308]	; (8001804 <USART2_CheckDmaReception+0x174>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a4c      	ldr	r2, [pc, #304]	; (8001804 <USART2_CheckDmaReception+0x174>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	6013      	str	r3, [r2, #0]

			search_from=0;
 80016da:	4b4b      	ldr	r3, [pc, #300]	; (8001808 <USART2_CheckDmaReception+0x178>)
 80016dc:	2200      	movs	r2, #0
 80016de:	801a      	strh	r2, [r3, #0]
			mode &= ~(mode_rx_start_of_string);
 80016e0:	4b47      	ldr	r3, [pc, #284]	; (8001800 <USART2_CheckDmaReception+0x170>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	f023 0310 	bic.w	r3, r3, #16
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	4b45      	ldr	r3, [pc, #276]	; (8001800 <USART2_CheckDmaReception+0x170>)
 80016ec:	701a      	strb	r2, [r3, #0]
			}
		}

	if (mode & mode_rx_buff_half_full ){
 80016ee:	4b44      	ldr	r3, [pc, #272]	; (8001800 <USART2_CheckDmaReception+0x170>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	f003 0308 	and.w	r3, r3, #8
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d01a      	beq.n	8001730 <USART2_CheckDmaReception+0xa0>
		if(mode & mode_founded_cross){
 80016fa:	4b41      	ldr	r3, [pc, #260]	; (8001800 <USART2_CheckDmaReception+0x170>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	b25b      	sxtb	r3, r3
 8001700:	2b00      	cmp	r3, #0
 8001702:	da0e      	bge.n	8001722 <USART2_CheckDmaReception+0x92>
			search_to=max_rx_buffer>>1;
 8001704:	4b41      	ldr	r3, [pc, #260]	; (800180c <USART2_CheckDmaReception+0x17c>)
 8001706:	2280      	movs	r2, #128	; 0x80
 8001708:	801a      	strh	r2, [r3, #0]
			proccesDmaData(search_to);
 800170a:	4b40      	ldr	r3, [pc, #256]	; (800180c <USART2_CheckDmaReception+0x17c>)
 800170c:	881b      	ldrh	r3, [r3, #0]
 800170e:	b2db      	uxtb	r3, r3
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff ff73 	bl	80015fc <proccesDmaData>
			search_from=search_to+1;
 8001716:	4b3d      	ldr	r3, [pc, #244]	; (800180c <USART2_CheckDmaReception+0x17c>)
 8001718:	881b      	ldrh	r3, [r3, #0]
 800171a:	3301      	adds	r3, #1
 800171c:	b29a      	uxth	r2, r3
 800171e:	4b3a      	ldr	r3, [pc, #232]	; (8001808 <USART2_CheckDmaReception+0x178>)
 8001720:	801a      	strh	r2, [r3, #0]
			}

		mode &=~( mode_rx_buff_half_full );
 8001722:	4b37      	ldr	r3, [pc, #220]	; (8001800 <USART2_CheckDmaReception+0x170>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	f023 0308 	bic.w	r3, r3, #8
 800172a:	b2da      	uxtb	r2, r3
 800172c:	4b34      	ldr	r3, [pc, #208]	; (8001800 <USART2_CheckDmaReception+0x170>)
 800172e:	701a      	strb	r2, [r3, #0]
		}

	if (mode & mode_rx_buff_full ){
 8001730:	4b33      	ldr	r3, [pc, #204]	; (8001800 <USART2_CheckDmaReception+0x170>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	f003 0304 	and.w	r3, r3, #4
 8001738:	2b00      	cmp	r3, #0
 800173a:	d028      	beq.n	800178e <USART2_CheckDmaReception+0xfe>

		DMA1_Channel6->CCR &=~(DMA_CCR_EN);
 800173c:	4b31      	ldr	r3, [pc, #196]	; (8001804 <USART2_CheckDmaReception+0x174>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a30      	ldr	r2, [pc, #192]	; (8001804 <USART2_CheckDmaReception+0x174>)
 8001742:	f023 0301 	bic.w	r3, r3, #1
 8001746:	6013      	str	r3, [r2, #0]
		DMA1_Channel6->CNDTR=max_rx_buffer;
 8001748:	4b2e      	ldr	r3, [pc, #184]	; (8001804 <USART2_CheckDmaReception+0x174>)
 800174a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800174e:	605a      	str	r2, [r3, #4]
		DMA1_Channel6->CCR |=DMA_CCR_EN;
 8001750:	4b2c      	ldr	r3, [pc, #176]	; (8001804 <USART2_CheckDmaReception+0x174>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a2b      	ldr	r2, [pc, #172]	; (8001804 <USART2_CheckDmaReception+0x174>)
 8001756:	f043 0301 	orr.w	r3, r3, #1
 800175a:	6013      	str	r3, [r2, #0]

		if(mode & mode_founded_cross){
 800175c:	4b28      	ldr	r3, [pc, #160]	; (8001800 <USART2_CheckDmaReception+0x170>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	b25b      	sxtb	r3, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	da0c      	bge.n	8001780 <USART2_CheckDmaReception+0xf0>
			search_to=max_rx_buffer;
 8001766:	4b29      	ldr	r3, [pc, #164]	; (800180c <USART2_CheckDmaReception+0x17c>)
 8001768:	f44f 7280 	mov.w	r2, #256	; 0x100
 800176c:	801a      	strh	r2, [r3, #0]
			proccesDmaData(search_to);
 800176e:	4b27      	ldr	r3, [pc, #156]	; (800180c <USART2_CheckDmaReception+0x17c>)
 8001770:	881b      	ldrh	r3, [r3, #0]
 8001772:	b2db      	uxtb	r3, r3
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff ff41 	bl	80015fc <proccesDmaData>
			search_from=0;
 800177a:	4b23      	ldr	r3, [pc, #140]	; (8001808 <USART2_CheckDmaReception+0x178>)
 800177c:	2200      	movs	r2, #0
 800177e:	801a      	strh	r2, [r3, #0]
			}
		mode &=~( mode_rx_buff_full );
 8001780:	4b1f      	ldr	r3, [pc, #124]	; (8001800 <USART2_CheckDmaReception+0x170>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	f023 0304 	bic.w	r3, r3, #4
 8001788:	b2da      	uxtb	r2, r3
 800178a:	4b1d      	ldr	r3, [pc, #116]	; (8001800 <USART2_CheckDmaReception+0x170>)
 800178c:	701a      	strb	r2, [r3, #0]
		}
	if (mode & mode_rx_end_of_string){
 800178e:	4b1c      	ldr	r3, [pc, #112]	; (8001800 <USART2_CheckDmaReception+0x170>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	f003 0320 	and.w	r3, r3, #32
 8001796:	2b00      	cmp	r3, #0
 8001798:	d02f      	beq.n	80017fa <USART2_CheckDmaReception+0x16a>
		if (mode & mode_founded_cross){
 800179a:	4b19      	ldr	r3, [pc, #100]	; (8001800 <USART2_CheckDmaReception+0x170>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	b25b      	sxtb	r3, r3
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	da2a      	bge.n	80017fa <USART2_CheckDmaReception+0x16a>
			mode &=~(mode_founded_cross);
 80017a4:	4b16      	ldr	r3, [pc, #88]	; (8001800 <USART2_CheckDmaReception+0x170>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	4b14      	ldr	r3, [pc, #80]	; (8001800 <USART2_CheckDmaReception+0x170>)
 80017b0:	701a      	strb	r2, [r3, #0]
			search_to=(DMA1_Channel6->CNDTR)-1;
 80017b2:	4b14      	ldr	r3, [pc, #80]	; (8001804 <USART2_CheckDmaReception+0x174>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	3b01      	subs	r3, #1
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	4b13      	ldr	r3, [pc, #76]	; (800180c <USART2_CheckDmaReception+0x17c>)
 80017be:	801a      	strh	r2, [r3, #0]

			DMA1_Channel6->CCR &=~(DMA_CCR_EN);
 80017c0:	4b10      	ldr	r3, [pc, #64]	; (8001804 <USART2_CheckDmaReception+0x174>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a0f      	ldr	r2, [pc, #60]	; (8001804 <USART2_CheckDmaReception+0x174>)
 80017c6:	f023 0301 	bic.w	r3, r3, #1
 80017ca:	6013      	str	r3, [r2, #0]
			DMA1_Channel6->CNDTR=max_rx_buffer;
 80017cc:	4b0d      	ldr	r3, [pc, #52]	; (8001804 <USART2_CheckDmaReception+0x174>)
 80017ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017d2:	605a      	str	r2, [r3, #4]
			DMA1_Channel6->CCR |=DMA_CCR_EN;
 80017d4:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <USART2_CheckDmaReception+0x174>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a0a      	ldr	r2, [pc, #40]	; (8001804 <USART2_CheckDmaReception+0x174>)
 80017da:	f043 0301 	orr.w	r3, r3, #1
 80017de:	6013      	str	r3, [r2, #0]

			proccesDmaData(search_to);
 80017e0:	4b0a      	ldr	r3, [pc, #40]	; (800180c <USART2_CheckDmaReception+0x17c>)
 80017e2:	881b      	ldrh	r3, [r3, #0]
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff ff08 	bl	80015fc <proccesDmaData>
			mode &= ~(mode_rx_end_of_string);
 80017ec:	4b04      	ldr	r3, [pc, #16]	; (8001800 <USART2_CheckDmaReception+0x170>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	f023 0320 	bic.w	r3, r3, #32
 80017f4:	b2da      	uxtb	r2, r3
 80017f6:	4b02      	ldr	r3, [pc, #8]	; (8001800 <USART2_CheckDmaReception+0x170>)
 80017f8:	701a      	strb	r2, [r3, #0]
			}
		}
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	2000014c 	.word	0x2000014c
 8001804:	4002006c 	.word	0x4002006c
 8001808:	20000024 	.word	0x20000024
 800180c:	20000022 	.word	0x20000022

08001810 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t cnt=0;
 8001816:	2300      	movs	r3, #0
 8001818:	71fb      	strb	r3, [r7, #7]

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800181a:	2001      	movs	r0, #1
 800181c:	f7ff fbbc 	bl	8000f98 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001820:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001824:	f7ff fba0 	bl	8000f68 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001828:	2003      	movs	r0, #3
 800182a:	f7ff f943 	bl	8000ab4 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800182e:	f000 f897 	bl	8001960 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001832:	f000 f9d3 	bl	8001bdc <MX_GPIO_Init>
  MX_DMA_Init();
 8001836:	f000 f9a9 	bl	8001b8c <MX_DMA_Init>
  MX_USART2_UART_Init();
 800183a:	f000 f8fb 	bl	8001a34 <MX_USART2_UART_Init>
  MX_TIM17_Init();
 800183e:	f000 f8c1 	bl	80019c4 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  my_memcpy("Ready: \r",tx_buffer ,&cnt,max_tx_buffer);
 8001842:	1dfa      	adds	r2, r7, #7
 8001844:	2320      	movs	r3, #32
 8001846:	493c      	ldr	r1, [pc, #240]	; (8001938 <main+0x128>)
 8001848:	483c      	ldr	r0, [pc, #240]	; (800193c <main+0x12c>)
 800184a:	f7ff fc43 	bl	80010d4 <my_memcpy>

  USART2->CR3 |= USART_CR3_DMAT; // set usart  TX with dma
 800184e:	4b3c      	ldr	r3, [pc, #240]	; (8001940 <main+0x130>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	4a3b      	ldr	r2, [pc, #236]	; (8001940 <main+0x130>)
 8001854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001858:	6093      	str	r3, [r2, #8]

  DMA1_Channel7->CNDTR=cnt;// dma inic
 800185a:	79fa      	ldrb	r2, [r7, #7]
 800185c:	4b39      	ldr	r3, [pc, #228]	; (8001944 <main+0x134>)
 800185e:	605a      	str	r2, [r3, #4]
  DMA1_Channel7->CCR |= DMA_CCR_MINC | DMA_CCR_DIR | DMA_CCR_TCIE | DMA_CCR_CIRC;
 8001860:	4b38      	ldr	r3, [pc, #224]	; (8001944 <main+0x134>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a37      	ldr	r2, [pc, #220]	; (8001944 <main+0x134>)
 8001866:	f043 03b2 	orr.w	r3, r3, #178	; 0xb2
 800186a:	6013      	str	r3, [r2, #0]
  DMA1_Channel7->CPAR=(uint32_t)&(USART2->TDR);
 800186c:	4b35      	ldr	r3, [pc, #212]	; (8001944 <main+0x134>)
 800186e:	4a36      	ldr	r2, [pc, #216]	; (8001948 <main+0x138>)
 8001870:	609a      	str	r2, [r3, #8]
  DMA1_Channel7->CMAR=(uint32_t)tx_buffer;
 8001872:	4b34      	ldr	r3, [pc, #208]	; (8001944 <main+0x134>)
 8001874:	4a30      	ldr	r2, [pc, #192]	; (8001938 <main+0x128>)
 8001876:	60da      	str	r2, [r3, #12]

  //DMA1_Channel7->CCR |= DMA_CCR_EN;	//start transmission
  //while((DMA1->ISR & DMA_ISR_TCIF7) == 0);// wait for transmission

  // enable usart it
  USART2->CR1 |= USART_CR1_RXNEIE;
 8001878:	4b31      	ldr	r3, [pc, #196]	; (8001940 <main+0x130>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a30      	ldr	r2, [pc, #192]	; (8001940 <main+0x130>)
 800187e:	f043 0320 	orr.w	r3, r3, #32
 8001882:	6013      	str	r3, [r2, #0]
  NVIC_EnableIRQ(USART2_IRQn);
 8001884:	2026      	movs	r0, #38	; 0x26
 8001886:	f7ff f947 	bl	8000b18 <__NVIC_EnableIRQ>

  USART2->CR3 |= USART_CR3_DMAR; // set usart RX with dma
 800188a:	4b2d      	ldr	r3, [pc, #180]	; (8001940 <main+0x130>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	4a2c      	ldr	r2, [pc, #176]	; (8001940 <main+0x130>)
 8001890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001894:	6093      	str	r3, [r2, #8]
  DMA1_Channel6->CNDTR = max_rx_buffer;
 8001896:	4b2d      	ldr	r3, [pc, #180]	; (800194c <main+0x13c>)
 8001898:	f44f 7280 	mov.w	r2, #256	; 0x100
 800189c:	605a      	str	r2, [r3, #4]
  DMA1_Channel6->CCR |= DMA_CCR_PL_0 | DMA_CCR_MINC | DMA_CCR_HTIE | DMA_CCR_TCIE ;//| DMA_CCR_CIRC; //DMA_CCR_CIRC
 800189e:	4b2b      	ldr	r3, [pc, #172]	; (800194c <main+0x13c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a2a      	ldr	r2, [pc, #168]	; (800194c <main+0x13c>)
 80018a4:	f443 5384 	orr.w	r3, r3, #4224	; 0x1080
 80018a8:	f043 0306 	orr.w	r3, r3, #6
 80018ac:	6013      	str	r3, [r2, #0]

  DMA1_Channel6->CPAR=(uint32_t)&(USART2->RDR);
 80018ae:	4b27      	ldr	r3, [pc, #156]	; (800194c <main+0x13c>)
 80018b0:	4a27      	ldr	r2, [pc, #156]	; (8001950 <main+0x140>)
 80018b2:	609a      	str	r2, [r3, #8]
  DMA1_Channel6->CMAR=(uint32_t)rx_buffer;
 80018b4:	4b25      	ldr	r3, [pc, #148]	; (800194c <main+0x13c>)
 80018b6:	4a27      	ldr	r2, [pc, #156]	; (8001954 <main+0x144>)
 80018b8:	60da      	str	r2, [r3, #12]

  DMA1_Channel6->CCR |= DMA_CCR_EN;//start listening
 80018ba:	4b24      	ldr	r3, [pc, #144]	; (800194c <main+0x13c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a23      	ldr	r2, [pc, #140]	; (800194c <main+0x13c>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	6013      	str	r3, [r2, #0]

  LL_TIM_EnableIT_UPDATE(TIM17);
 80018c6:	4824      	ldr	r0, [pc, #144]	; (8001958 <main+0x148>)
 80018c8:	f7ff fbb0 	bl	800102c <LL_TIM_EnableIT_UPDATE>
  TIM17->CR1 |= TIM_CR1_CEN; // start timer
 80018cc:	4b22      	ldr	r3, [pc, #136]	; (8001958 <main+0x148>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a21      	ldr	r2, [pc, #132]	; (8001958 <main+0x148>)
 80018d2:	f043 0301 	orr.w	r3, r3, #1
 80018d6:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  __WFI();
 80018d8:	bf30      	wfi
	  if (mode & mode_1_sec)
 80018da:	4b20      	ldr	r3, [pc, #128]	; (800195c <main+0x14c>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d008      	beq.n	80018f8 <main+0xe8>
	  	  {
		  one_sec_delayed();
 80018e6:	f7ff fc1f 	bl	8001128 <one_sec_delayed>
	  	  mode &= ~(mode_1_sec);}
 80018ea:	4b1c      	ldr	r3, [pc, #112]	; (800195c <main+0x14c>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	f023 0301 	bic.w	r3, r3, #1
 80018f2:	b2da      	uxtb	r2, r3
 80018f4:	4b19      	ldr	r3, [pc, #100]	; (800195c <main+0x14c>)
 80018f6:	701a      	strb	r2, [r3, #0]
	  if (mode & mode_next_str )
 80018f8:	4b18      	ldr	r3, [pc, #96]	; (800195c <main+0x14c>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d008      	beq.n	8001916 <main+0x106>
	  	  {
		  define_next_str();
 8001904:	f7ff fde0 	bl	80014c8 <define_next_str>
		  mode &= ~(mode_next_str);
 8001908:	4b14      	ldr	r3, [pc, #80]	; (800195c <main+0x14c>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	f023 0302 	bic.w	r3, r3, #2
 8001910:	b2da      	uxtb	r2, r3
 8001912:	4b12      	ldr	r3, [pc, #72]	; (800195c <main+0x14c>)
 8001914:	701a      	strb	r2, [r3, #0]
	  	  }
	  if(mode & (mode_rx_start_of_string | mode_rx_end_of_string))
 8001916:	4b11      	ldr	r3, [pc, #68]	; (800195c <main+0x14c>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <main+0x116>
	  	  {

		  USART2_CheckDmaReception();
 8001922:	f7ff feb5 	bl	8001690 <USART2_CheckDmaReception>

	  	  }
	  if (mode & (mode_rx_buff_full | mode_rx_buff_half_full) )
 8001926:	4b0d      	ldr	r3, [pc, #52]	; (800195c <main+0x14c>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	f003 030c 	and.w	r3, r3, #12
 800192e:	2b00      	cmp	r3, #0
 8001930:	d0d2      	beq.n	80018d8 <main+0xc8>
	  	  {

		  USART2_CheckDmaReception();
 8001932:	f7ff fead 	bl	8001690 <USART2_CheckDmaReception>
	  __WFI();
 8001936:	e7cf      	b.n	80018d8 <main+0xc8>
 8001938:	2000012c 	.word	0x2000012c
 800193c:	0800287c 	.word	0x0800287c
 8001940:	40004400 	.word	0x40004400
 8001944:	40020080 	.word	0x40020080
 8001948:	40004428 	.word	0x40004428
 800194c:	4002006c 	.word	0x4002006c
 8001950:	40004424 	.word	0x40004424
 8001954:	2000002c 	.word	0x2000002c
 8001958:	40014800 	.word	0x40014800
 800195c:	2000014c 	.word	0x2000014c

08001960 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001964:	2000      	movs	r0, #0
 8001966:	f7ff fb2f 	bl	8000fc8 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 800196a:	bf00      	nop
 800196c:	f7ff fb40 	bl	8000ff0 <LL_FLASH_GetLatency>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1fa      	bne.n	800196c <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 8001976:	f7ff fa49 	bl	8000e0c <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 800197a:	bf00      	nop
 800197c:	f7ff fa56 	bl	8000e2c <LL_RCC_HSI_IsReady>
 8001980:	4603      	mov	r3, r0
 8001982:	2b01      	cmp	r3, #1
 8001984:	d1fa      	bne.n	800197c <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8001986:	2010      	movs	r0, #16
 8001988:	f7ff fa62 	bl	8000e50 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800198c:	2000      	movs	r0, #0
 800198e:	f7ff fa97 	bl	8000ec0 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001992:	2000      	movs	r0, #0
 8001994:	f7ff faa8 	bl	8000ee8 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 8001998:	2000      	movs	r0, #0
 800199a:	f7ff fab9 	bl	8000f10 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 800199e:	2000      	movs	r0, #0
 80019a0:	f7ff fa6c 	bl	8000e7c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80019a4:	bf00      	nop
 80019a6:	f7ff fa7d 	bl	8000ea4 <LL_RCC_GetSysClkSource>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d1fa      	bne.n	80019a6 <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 80019b0:	4803      	ldr	r0, [pc, #12]	; (80019c0 <SystemClock_Config+0x60>)
 80019b2:	f000 fef1 	bl	8002798 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 80019b6:	4802      	ldr	r0, [pc, #8]	; (80019c0 <SystemClock_Config+0x60>)
 80019b8:	f000 fefc 	bl	80027b4 <LL_SetSystemCoreClock>
}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	007a1200 	.word	0x007a1200

080019c4 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80019ca:	1d3b      	adds	r3, r7, #4
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	60da      	str	r2, [r3, #12]
 80019d6:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM17);
 80019d8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80019dc:	f7ff fadc 	bl	8000f98 <LL_APB2_GRP1_EnableClock>

  /* TIM17 interrupt Init */
  NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80019e0:	f7ff f88c 	bl	8000afc <__NVIC_GetPriorityGrouping>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2200      	movs	r2, #0
 80019e8:	2100      	movs	r1, #0
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff f8dc 	bl	8000ba8 <NVIC_EncodePriority>
 80019f0:	4603      	mov	r3, r0
 80019f2:	4619      	mov	r1, r3
 80019f4:	201a      	movs	r0, #26
 80019f6:	f7ff f8ad 	bl	8000b54 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80019fa:	201a      	movs	r0, #26
 80019fc:	f7ff f88c 	bl	8000b18 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  TIM_InitStruct.Prescaler = 7999;
 8001a00:	f641 733f 	movw	r3, #7999	; 0x1f3f
 8001a04:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001a06:	2300      	movs	r3, #0
 8001a08:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 999;
 8001a0a:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001a0e:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001a10:	2300      	movs	r3, #0
 8001a12:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 8001a14:	2300      	movs	r3, #0
 8001a16:	753b      	strb	r3, [r7, #20]
  LL_TIM_Init(TIM17, &TIM_InitStruct);
 8001a18:	1d3b      	adds	r3, r7, #4
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4804      	ldr	r0, [pc, #16]	; (8001a30 <MX_TIM17_Init+0x6c>)
 8001a1e:	f000 fd57 	bl	80024d0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM17);
 8001a22:	4803      	ldr	r0, [pc, #12]	; (8001a30 <MX_TIM17_Init+0x6c>)
 8001a24:	f7ff faf2 	bl	800100c <LL_TIM_DisableARRPreload>
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001a28:	bf00      	nop
 8001a2a:	3718      	adds	r7, #24
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40014800 	.word	0x40014800

08001a34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b08e      	sub	sp, #56	; 0x38
 8001a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001a3a:	f107 031c 	add.w	r3, r7, #28
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	605a      	str	r2, [r3, #4]
 8001a44:	609a      	str	r2, [r3, #8]
 8001a46:	60da      	str	r2, [r3, #12]
 8001a48:	611a      	str	r2, [r3, #16]
 8001a4a:	615a      	str	r2, [r3, #20]
 8001a4c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a4e:	1d3b      	adds	r3, r7, #4
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	609a      	str	r2, [r3, #8]
 8001a58:	60da      	str	r2, [r3, #12]
 8001a5a:	611a      	str	r2, [r3, #16]
 8001a5c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001a5e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001a62:	f7ff fa81 	bl	8000f68 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001a66:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001a6a:	f7ff fa65 	bl	8000f38 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001a6e:	f248 0304 	movw	r3, #32772	; 0x8004
 8001a72:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001a74:	2302      	movs	r3, #2
 8001a76:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a80:	2300      	movs	r3, #0
 8001a82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001a84:	2307      	movs	r3, #7
 8001a86:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a88:	1d3b      	adds	r3, r7, #4
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a90:	f000 fad4 	bl	800203c <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_RX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001a94:	2200      	movs	r2, #0
 8001a96:	2106      	movs	r1, #6
 8001a98:	483a      	ldr	r0, [pc, #232]	; (8001b84 <MX_USART2_UART_Init+0x150>)
 8001a9a:	f7ff f8b9 	bl	8000c10 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_LOW);
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	2106      	movs	r1, #6
 8001aa2:	4838      	ldr	r0, [pc, #224]	; (8001b84 <MX_USART2_UART_Init+0x150>)
 8001aa4:	f7ff f98e 	bl	8000dc4 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	2106      	movs	r1, #6
 8001aac:	4835      	ldr	r0, [pc, #212]	; (8001b84 <MX_USART2_UART_Init+0x150>)
 8001aae:	f7ff f8d5 	bl	8000c5c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	2106      	movs	r1, #6
 8001ab6:	4833      	ldr	r0, [pc, #204]	; (8001b84 <MX_USART2_UART_Init+0x150>)
 8001ab8:	f7ff f8f4 	bl	8000ca4 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 8001abc:	2280      	movs	r2, #128	; 0x80
 8001abe:	2106      	movs	r1, #6
 8001ac0:	4830      	ldr	r0, [pc, #192]	; (8001b84 <MX_USART2_UART_Init+0x150>)
 8001ac2:	f7ff f913 	bl	8000cec <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2106      	movs	r1, #6
 8001aca:	482e      	ldr	r0, [pc, #184]	; (8001b84 <MX_USART2_UART_Init+0x150>)
 8001acc:	f7ff f932 	bl	8000d34 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	2106      	movs	r1, #6
 8001ad4:	482b      	ldr	r0, [pc, #172]	; (8001b84 <MX_USART2_UART_Init+0x150>)
 8001ad6:	f7ff f951 	bl	8000d7c <LL_DMA_SetMemorySize>

  /* USART2_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8001ada:	2210      	movs	r2, #16
 8001adc:	2107      	movs	r1, #7
 8001ade:	4829      	ldr	r0, [pc, #164]	; (8001b84 <MX_USART2_UART_Init+0x150>)
 8001ae0:	f7ff f896 	bl	8000c10 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_LOW);
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	2107      	movs	r1, #7
 8001ae8:	4826      	ldr	r0, [pc, #152]	; (8001b84 <MX_USART2_UART_Init+0x150>)
 8001aea:	f7ff f96b 	bl	8000dc4 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 8001aee:	2200      	movs	r2, #0
 8001af0:	2107      	movs	r1, #7
 8001af2:	4824      	ldr	r0, [pc, #144]	; (8001b84 <MX_USART2_UART_Init+0x150>)
 8001af4:	f7ff f8b2 	bl	8000c5c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 8001af8:	2200      	movs	r2, #0
 8001afa:	2107      	movs	r1, #7
 8001afc:	4821      	ldr	r0, [pc, #132]	; (8001b84 <MX_USART2_UART_Init+0x150>)
 8001afe:	f7ff f8d1 	bl	8000ca4 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 8001b02:	2280      	movs	r2, #128	; 0x80
 8001b04:	2107      	movs	r1, #7
 8001b06:	481f      	ldr	r0, [pc, #124]	; (8001b84 <MX_USART2_UART_Init+0x150>)
 8001b08:	f7ff f8f0 	bl	8000cec <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	2107      	movs	r1, #7
 8001b10:	481c      	ldr	r0, [pc, #112]	; (8001b84 <MX_USART2_UART_Init+0x150>)
 8001b12:	f7ff f90f 	bl	8000d34 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 8001b16:	2200      	movs	r2, #0
 8001b18:	2107      	movs	r1, #7
 8001b1a:	481a      	ldr	r0, [pc, #104]	; (8001b84 <MX_USART2_UART_Init+0x150>)
 8001b1c:	f7ff f92e 	bl	8000d7c <LL_DMA_SetMemorySize>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001b20:	f7fe ffec 	bl	8000afc <__NVIC_GetPriorityGrouping>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2200      	movs	r2, #0
 8001b28:	2100      	movs	r1, #0
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff f83c 	bl	8000ba8 <NVIC_EncodePriority>
 8001b30:	4603      	mov	r3, r0
 8001b32:	4619      	mov	r1, r3
 8001b34:	2026      	movs	r0, #38	; 0x26
 8001b36:	f7ff f80d 	bl	8000b54 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8001b3a:	2026      	movs	r0, #38	; 0x26
 8001b3c:	f7fe ffec 	bl	8000b18 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001b40:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001b44:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001b46:	2300      	movs	r3, #0
 8001b48:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001b52:	230c      	movs	r3, #12
 8001b54:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001b56:	2300      	movs	r3, #0
 8001b58:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8001b5e:	f107 031c 	add.w	r3, r7, #28
 8001b62:	4619      	mov	r1, r3
 8001b64:	4808      	ldr	r0, [pc, #32]	; (8001b88 <MX_USART2_UART_Init+0x154>)
 8001b66:	f000 fd91 	bl	800268c <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 8001b6a:	4807      	ldr	r0, [pc, #28]	; (8001b88 <MX_USART2_UART_Init+0x154>)
 8001b6c:	f7ff fa94 	bl	8001098 <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART2);
 8001b70:	4805      	ldr	r0, [pc, #20]	; (8001b88 <MX_USART2_UART_Init+0x154>)
 8001b72:	f7ff fa7b 	bl	800106c <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8001b76:	4804      	ldr	r0, [pc, #16]	; (8001b88 <MX_USART2_UART_Init+0x154>)
 8001b78:	f7ff fa68 	bl	800104c <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b7c:	bf00      	nop
 8001b7e:	3738      	adds	r7, #56	; 0x38
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40020000 	.word	0x40020000
 8001b88:	40004400 	.word	0x40004400

08001b8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8001b90:	2001      	movs	r0, #1
 8001b92:	f7ff f9d1 	bl	8000f38 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001b96:	f7fe ffb1 	bl	8000afc <__NVIC_GetPriorityGrouping>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff f801 	bl	8000ba8 <NVIC_EncodePriority>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	4619      	mov	r1, r3
 8001baa:	2010      	movs	r0, #16
 8001bac:	f7fe ffd2 	bl	8000b54 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001bb0:	2010      	movs	r0, #16
 8001bb2:	f7fe ffb1 	bl	8000b18 <__NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001bb6:	f7fe ffa1 	bl	8000afc <__NVIC_GetPriorityGrouping>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7fe fff1 	bl	8000ba8 <NVIC_EncodePriority>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	4619      	mov	r1, r3
 8001bca:	2011      	movs	r0, #17
 8001bcc:	f7fe ffc2 	bl	8000b54 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001bd0:	2011      	movs	r0, #17
 8001bd2:	f7fe ffa1 	bl	8000b18 <__NVIC_EnableIRQ>

}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
	...

08001bdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be2:	463b      	mov	r3, r7
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	60da      	str	r2, [r3, #12]
 8001bee:	611a      	str	r2, [r3, #16]
 8001bf0:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 8001bf2:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001bf6:	f7ff f99f 	bl	8000f38 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001bfa:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001bfe:	f7ff f99b 	bl	8000f38 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001c02:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001c06:	f7ff f997 	bl	8000f38 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(led_GPIO_Port, led_Pin);
 8001c0a:	2108      	movs	r1, #8
 8001c0c:	480a      	ldr	r0, [pc, #40]	; (8001c38 <MX_GPIO_Init+0x5c>)
 8001c0e:	f7ff fa53 	bl	80010b8 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = led_Pin;
 8001c12:	2308      	movs	r3, #8
 8001c14:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001c16:	2301      	movs	r3, #1
 8001c18:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c22:	2300      	movs	r3, #0
 8001c24:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 8001c26:	463b      	mov	r3, r7
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4803      	ldr	r0, [pc, #12]	; (8001c38 <MX_GPIO_Init+0x5c>)
 8001c2c:	f000 fa06 	bl	800203c <LL_GPIO_Init>

}
 8001c30:	bf00      	nop
 8001c32:	3718      	adds	r7, #24
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	48000400 	.word	0x48000400

08001c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c40:	bf00      	nop
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c4e:	e7fe      	b.n	8001c4e <HardFault_Handler+0x4>

08001c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c54:	e7fe      	b.n	8001c54 <MemManage_Handler+0x4>

08001c56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c56:	b480      	push	{r7}
 8001c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c5a:	e7fe      	b.n	8001c5a <BusFault_Handler+0x4>

08001c5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c60:	e7fe      	b.n	8001c60 <UsageFault_Handler+0x4>

08001c62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c62:	b480      	push	{r7}
 8001c64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c82:	bf00      	nop
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c90:	bf00      	nop
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
	...

08001c9c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */
	if (DMA1->ISR & DMA_ISR_TCIF6)
 8001ca0:	4b13      	ldr	r3, [pc, #76]	; (8001cf0 <DMA1_Channel6_IRQHandler+0x54>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d00a      	beq.n	8001cc2 <DMA1_Channel6_IRQHandler+0x26>
		{mode |= mode_rx_buff_full;
 8001cac:	4b11      	ldr	r3, [pc, #68]	; (8001cf4 <DMA1_Channel6_IRQHandler+0x58>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	f043 0304 	orr.w	r3, r3, #4
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	4b0f      	ldr	r3, [pc, #60]	; (8001cf4 <DMA1_Channel6_IRQHandler+0x58>)
 8001cb8:	701a      	strb	r2, [r3, #0]
		DMA1_Channel6->CNDTR=max_rx_buffer;}
 8001cba:	4b0f      	ldr	r3, [pc, #60]	; (8001cf8 <DMA1_Channel6_IRQHandler+0x5c>)
 8001cbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cc0:	605a      	str	r2, [r3, #4]
	if (DMA1->ISR & DMA_ISR_HTIF6)
 8001cc2:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <DMA1_Channel6_IRQHandler+0x54>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d006      	beq.n	8001cdc <DMA1_Channel6_IRQHandler+0x40>
		mode |= mode_rx_buff_half_full;
 8001cce:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <DMA1_Channel6_IRQHandler+0x58>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	f043 0308 	orr.w	r3, r3, #8
 8001cd6:	b2da      	uxtb	r2, r3
 8001cd8:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <DMA1_Channel6_IRQHandler+0x58>)
 8001cda:	701a      	strb	r2, [r3, #0]
	DMA1->IFCR = DMA_IFCR_CGIF6;//clear flag
 8001cdc:	4b04      	ldr	r3, [pc, #16]	; (8001cf0 <DMA1_Channel6_IRQHandler+0x54>)
 8001cde:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001ce2:	605a      	str	r2, [r3, #4]
  /* USER CODE END DMA1_Channel6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	40020000 	.word	0x40020000
 8001cf4:	2000014c 	.word	0x2000014c
 8001cf8:	4002006c 	.word	0x4002006c

08001cfc <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */
	DMA1_Channel7->CCR &=~(DMA_CCR_EN);//disable channel
 8001d00:	4b0a      	ldr	r3, [pc, #40]	; (8001d2c <DMA1_Channel7_IRQHandler+0x30>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a09      	ldr	r2, [pc, #36]	; (8001d2c <DMA1_Channel7_IRQHandler+0x30>)
 8001d06:	f023 0301 	bic.w	r3, r3, #1
 8001d0a:	6013      	str	r3, [r2, #0]
	mode |= mode_next_str;
 8001d0c:	4b08      	ldr	r3, [pc, #32]	; (8001d30 <DMA1_Channel7_IRQHandler+0x34>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	f043 0302 	orr.w	r3, r3, #2
 8001d14:	b2da      	uxtb	r2, r3
 8001d16:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <DMA1_Channel7_IRQHandler+0x34>)
 8001d18:	701a      	strb	r2, [r3, #0]

	DMA1->IFCR = DMA_IFCR_CGIF7;//clear flag
 8001d1a:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <DMA1_Channel7_IRQHandler+0x38>)
 8001d1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d20:	605a      	str	r2, [r3, #4]
  /* USER CODE END DMA1_Channel7_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001d22:	bf00      	nop
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	40020080 	.word	0x40020080
 8001d30:	2000014c 	.word	0x2000014c
 8001d34:	40020000 	.word	0x40020000

08001d38 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	//LL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
	mode |= mode_1_sec;
 8001d3c:	4b08      	ldr	r3, [pc, #32]	; (8001d60 <TIM1_TRG_COM_TIM17_IRQHandler+0x28>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	b2da      	uxtb	r2, r3
 8001d46:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <TIM1_TRG_COM_TIM17_IRQHandler+0x28>)
 8001d48:	701a      	strb	r2, [r3, #0]
	TIM17->SR &=~(TIM_SR_UIF);
 8001d4a:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <TIM1_TRG_COM_TIM17_IRQHandler+0x2c>)
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	4a05      	ldr	r2, [pc, #20]	; (8001d64 <TIM1_TRG_COM_TIM17_IRQHandler+0x2c>)
 8001d50:	f023 0301 	bic.w	r3, r3, #1
 8001d54:	6113      	str	r3, [r2, #16]
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001d56:	bf00      	nop
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	2000014c 	.word	0x2000014c
 8001d64:	40014800 	.word	0x40014800

08001d68 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0

	//if(USART2->ISR & USART_ISR_RXNE)
	uint8_t ch=USART2->RDR;
 8001d6e:	4b0f      	ldr	r3, [pc, #60]	; (8001dac <USART2_IRQHandler+0x44>)
 8001d70:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	71fb      	strb	r3, [r7, #7]
		if( ch == '$')
 8001d76:	79fb      	ldrb	r3, [r7, #7]
 8001d78:	2b24      	cmp	r3, #36	; 0x24
 8001d7a:	d107      	bne.n	8001d8c <USART2_IRQHandler+0x24>
			{mode|=mode_rx_end_of_string;}
 8001d7c:	4b0c      	ldr	r3, [pc, #48]	; (8001db0 <USART2_IRQHandler+0x48>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	f043 0320 	orr.w	r3, r3, #32
 8001d84:	b2da      	uxtb	r2, r3
 8001d86:	4b0a      	ldr	r3, [pc, #40]	; (8001db0 <USART2_IRQHandler+0x48>)
 8001d88:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d8a:	e009      	b.n	8001da0 <USART2_IRQHandler+0x38>
		else if(ch == '#'){
 8001d8c:	79fb      	ldrb	r3, [r7, #7]
 8001d8e:	2b23      	cmp	r3, #35	; 0x23
 8001d90:	d106      	bne.n	8001da0 <USART2_IRQHandler+0x38>
			{mode|=mode_rx_start_of_string;}
 8001d92:	4b07      	ldr	r3, [pc, #28]	; (8001db0 <USART2_IRQHandler+0x48>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	f043 0310 	orr.w	r3, r3, #16
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	4b04      	ldr	r3, [pc, #16]	; (8001db0 <USART2_IRQHandler+0x48>)
 8001d9e:	701a      	strb	r2, [r3, #0]
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	40004400 	.word	0x40004400
 8001db0:	2000014c 	.word	0x2000014c

08001db4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001db8:	4b08      	ldr	r3, [pc, #32]	; (8001ddc <SystemInit+0x28>)
 8001dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dbe:	4a07      	ldr	r2, [pc, #28]	; (8001ddc <SystemInit+0x28>)
 8001dc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001dc8:	4b04      	ldr	r3, [pc, #16]	; (8001ddc <SystemInit+0x28>)
 8001dca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001dce:	609a      	str	r2, [r3, #8]
#endif
}
 8001dd0:	bf00      	nop
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	e000ed00 	.word	0xe000ed00

08001de0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001de0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e18 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001de4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001de6:	e003      	b.n	8001df0 <LoopCopyDataInit>

08001de8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001de8:	4b0c      	ldr	r3, [pc, #48]	; (8001e1c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001dea:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001dec:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001dee:	3104      	adds	r1, #4

08001df0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001df0:	480b      	ldr	r0, [pc, #44]	; (8001e20 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001df2:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001df4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001df6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001df8:	d3f6      	bcc.n	8001de8 <CopyDataInit>
	ldr	r2, =_sbss
 8001dfa:	4a0b      	ldr	r2, [pc, #44]	; (8001e28 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001dfc:	e002      	b.n	8001e04 <LoopFillZerobss>

08001dfe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001dfe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001e00:	f842 3b04 	str.w	r3, [r2], #4

08001e04 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001e04:	4b09      	ldr	r3, [pc, #36]	; (8001e2c <LoopForever+0x16>)
	cmp	r2, r3
 8001e06:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001e08:	d3f9      	bcc.n	8001dfe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e0a:	f7ff ffd3 	bl	8001db4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e0e:	f000 fce1 	bl	80027d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e12:	f7ff fcfd 	bl	8001810 <main>

08001e16 <LoopForever>:

LoopForever:
    b LoopForever
 8001e16:	e7fe      	b.n	8001e16 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e18:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8001e1c:	080028b0 	.word	0x080028b0
	ldr	r0, =_sdata
 8001e20:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001e24:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 8001e28:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 8001e2c:	20000150 	.word	0x20000150

08001e30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e30:	e7fe      	b.n	8001e30 <ADC1_2_IRQHandler>

08001e32 <LL_GPIO_SetPinMode>:
{
 8001e32:	b480      	push	{r7}
 8001e34:	b089      	sub	sp, #36	; 0x24
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	60f8      	str	r0, [r7, #12]
 8001e3a:	60b9      	str	r1, [r7, #8]
 8001e3c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	fa93 f3a3 	rbit	r3, r3
 8001e4c:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	fab3 f383 	clz	r3, r3
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	2103      	movs	r1, #3
 8001e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	401a      	ands	r2, r3
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	fa93 f3a3 	rbit	r3, r3
 8001e6c:	61bb      	str	r3, [r7, #24]
  return result;
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	fab3 f383 	clz	r3, r3
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	6879      	ldr	r1, [r7, #4]
 8001e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	601a      	str	r2, [r3, #0]
}
 8001e84:	bf00      	nop
 8001e86:	3724      	adds	r7, #36	; 0x24
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <LL_GPIO_SetPinOutputType>:
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	685a      	ldr	r2, [r3, #4]
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	401a      	ands	r2, r3
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	6879      	ldr	r1, [r7, #4]
 8001eaa:	fb01 f303 	mul.w	r3, r1, r3
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	605a      	str	r2, [r3, #4]
}
 8001eb4:	bf00      	nop
 8001eb6:	3714      	adds	r7, #20
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <LL_GPIO_SetPinSpeed>:
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b089      	sub	sp, #36	; 0x24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	fa93 f3a3 	rbit	r3, r3
 8001eda:	613b      	str	r3, [r7, #16]
  return result;
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	fab3 f383 	clz	r3, r3
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	2103      	movs	r1, #3
 8001ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8001eec:	43db      	mvns	r3, r3
 8001eee:	401a      	ands	r2, r3
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	fa93 f3a3 	rbit	r3, r3
 8001efa:	61bb      	str	r3, [r7, #24]
  return result;
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	fab3 f383 	clz	r3, r3
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	6879      	ldr	r1, [r7, #4]
 8001f08:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0c:	431a      	orrs	r2, r3
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	609a      	str	r2, [r3, #8]
}
 8001f12:	bf00      	nop
 8001f14:	3724      	adds	r7, #36	; 0x24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <LL_GPIO_SetPinPull>:
{
 8001f1e:	b480      	push	{r7}
 8001f20:	b089      	sub	sp, #36	; 0x24
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	60f8      	str	r0, [r7, #12]
 8001f26:	60b9      	str	r1, [r7, #8]
 8001f28:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	68da      	ldr	r2, [r3, #12]
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	fa93 f3a3 	rbit	r3, r3
 8001f38:	613b      	str	r3, [r7, #16]
  return result;
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	fab3 f383 	clz	r3, r3
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	2103      	movs	r1, #3
 8001f46:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	401a      	ands	r2, r3
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	fa93 f3a3 	rbit	r3, r3
 8001f58:	61bb      	str	r3, [r7, #24]
  return result;
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	fab3 f383 	clz	r3, r3
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	60da      	str	r2, [r3, #12]
}
 8001f70:	bf00      	nop
 8001f72:	3724      	adds	r7, #36	; 0x24
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <LL_GPIO_SetAFPin_0_7>:
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b089      	sub	sp, #36	; 0x24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6a1a      	ldr	r2, [r3, #32]
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	fa93 f3a3 	rbit	r3, r3
 8001f96:	613b      	str	r3, [r7, #16]
  return result;
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	fab3 f383 	clz	r3, r3
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	210f      	movs	r1, #15
 8001fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	401a      	ands	r2, r3
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	fa93 f3a3 	rbit	r3, r3
 8001fb6:	61bb      	str	r3, [r7, #24]
  return result;
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	fab3 f383 	clz	r3, r3
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	6879      	ldr	r1, [r7, #4]
 8001fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	621a      	str	r2, [r3, #32]
}
 8001fce:	bf00      	nop
 8001fd0:	3724      	adds	r7, #36	; 0x24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <LL_GPIO_SetAFPin_8_15>:
{
 8001fda:	b480      	push	{r7}
 8001fdc:	b089      	sub	sp, #36	; 0x24
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	60f8      	str	r0, [r7, #12]
 8001fe2:	60b9      	str	r1, [r7, #8]
 8001fe4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	0a1b      	lsrs	r3, r3, #8
 8001fee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	fa93 f3a3 	rbit	r3, r3
 8001ff6:	613b      	str	r3, [r7, #16]
  return result;
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	fab3 f383 	clz	r3, r3
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	210f      	movs	r1, #15
 8002004:	fa01 f303 	lsl.w	r3, r1, r3
 8002008:	43db      	mvns	r3, r3
 800200a:	401a      	ands	r2, r3
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	0a1b      	lsrs	r3, r3, #8
 8002010:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	fa93 f3a3 	rbit	r3, r3
 8002018:	61bb      	str	r3, [r7, #24]
  return result;
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	fab3 f383 	clz	r3, r3
 8002020:	b2db      	uxtb	r3, r3
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	6879      	ldr	r1, [r7, #4]
 8002026:	fa01 f303 	lsl.w	r3, r1, r3
 800202a:	431a      	orrs	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002030:	bf00      	nop
 8002032:	3724      	adds	r7, #36	; 0x24
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b088      	sub	sp, #32
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	fa93 f3a3 	rbit	r3, r3
 8002052:	613b      	str	r3, [r7, #16]
  return result;
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	fab3 f383 	clz	r3, r3
 800205a:	b2db      	uxtb	r3, r3
 800205c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800205e:	e051      	b.n	8002104 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	2101      	movs	r1, #1
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	fa01 f303 	lsl.w	r3, r1, r3
 800206c:	4013      	ands	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d043      	beq.n	80020fe <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d003      	beq.n	8002086 <LL_GPIO_Init+0x4a>
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b02      	cmp	r3, #2
 8002084:	d10e      	bne.n	80020a4 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	461a      	mov	r2, r3
 800208c:	69b9      	ldr	r1, [r7, #24]
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7ff ff16 	bl	8001ec0 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	6819      	ldr	r1, [r3, #0]
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	461a      	mov	r2, r3
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f7ff fef6 	bl	8001e90 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	461a      	mov	r2, r3
 80020aa:	69b9      	ldr	r1, [r7, #24]
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f7ff ff36 	bl	8001f1e <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d11a      	bne.n	80020f0 <LL_GPIO_Init+0xb4>
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	fa93 f3a3 	rbit	r3, r3
 80020c4:	60bb      	str	r3, [r7, #8]
  return result;
 80020c6:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80020c8:	fab3 f383 	clz	r3, r3
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b07      	cmp	r3, #7
 80020d0:	d807      	bhi.n	80020e2 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	461a      	mov	r2, r3
 80020d8:	69b9      	ldr	r1, [r7, #24]
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f7ff ff4e 	bl	8001f7c <LL_GPIO_SetAFPin_0_7>
 80020e0:	e006      	b.n	80020f0 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	461a      	mov	r2, r3
 80020e8:	69b9      	ldr	r1, [r7, #24]
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7ff ff75 	bl	8001fda <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	461a      	mov	r2, r3
 80020f6:	69b9      	ldr	r1, [r7, #24]
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f7ff fe9a 	bl	8001e32 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	3301      	adds	r3, #1
 8002102:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	fa22 f303 	lsr.w	r3, r2, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d1a6      	bne.n	8002060 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3720      	adds	r7, #32
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <LL_RCC_HSI_IsReady>:
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8002120:	4b06      	ldr	r3, [pc, #24]	; (800213c <LL_RCC_HSI_IsReady+0x20>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b02      	cmp	r3, #2
 800212a:	bf0c      	ite	eq
 800212c:	2301      	moveq	r3, #1
 800212e:	2300      	movne	r3, #0
 8002130:	b2db      	uxtb	r3, r3
}
 8002132:	4618      	mov	r0, r3
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	40021000 	.word	0x40021000

08002140 <LL_RCC_LSE_IsReady>:
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8002144:	4b06      	ldr	r3, [pc, #24]	; (8002160 <LL_RCC_LSE_IsReady+0x20>)
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	f003 0302 	and.w	r3, r3, #2
 800214c:	2b02      	cmp	r3, #2
 800214e:	bf0c      	ite	eq
 8002150:	2301      	moveq	r3, #1
 8002152:	2300      	movne	r3, #0
 8002154:	b2db      	uxtb	r3, r3
}
 8002156:	4618      	mov	r0, r3
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	40021000 	.word	0x40021000

08002164 <LL_RCC_GetSysClkSource>:
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002168:	4b04      	ldr	r3, [pc, #16]	; (800217c <LL_RCC_GetSysClkSource+0x18>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f003 030c 	and.w	r3, r3, #12
}
 8002170:	4618      	mov	r0, r3
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	40021000 	.word	0x40021000

08002180 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002184:	4b04      	ldr	r3, [pc, #16]	; (8002198 <LL_RCC_GetAHBPrescaler+0x18>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800218c:	4618      	mov	r0, r3
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	40021000 	.word	0x40021000

0800219c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80021a0:	4b04      	ldr	r3, [pc, #16]	; (80021b4 <LL_RCC_GetAPB1Prescaler+0x18>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	40021000 	.word	0x40021000

080021b8 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80021bc:	4b04      	ldr	r3, [pc, #16]	; (80021d0 <LL_RCC_GetAPB2Prescaler+0x18>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	40021000 	.word	0x40021000

080021d4 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 80021dc:	4b07      	ldr	r3, [pc, #28]	; (80021fc <LL_RCC_GetUSARTClockSource+0x28>)
 80021de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021e0:	2103      	movs	r1, #3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	fa01 f303 	lsl.w	r3, r1, r3
 80021e8:	401a      	ands	r2, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	061b      	lsls	r3, r3, #24
 80021ee:	4313      	orrs	r3, r2
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	40021000 	.word	0x40021000

08002200 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8002204:	4b04      	ldr	r3, [pc, #16]	; (8002218 <LL_RCC_PLL_GetMainSource+0x18>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 800220c:	4618      	mov	r0, r3
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	40021000 	.word	0x40021000

0800221c <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8002220:	4b04      	ldr	r3, [pc, #16]	; (8002234 <LL_RCC_PLL_GetMultiplicator+0x18>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8002228:	4618      	mov	r0, r3
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	40021000 	.word	0x40021000

08002238 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 800223c:	4b04      	ldr	r3, [pc, #16]	; (8002250 <LL_RCC_PLL_GetPrediv+0x18>)
 800223e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002240:	f003 030f 	and.w	r3, r3, #15
}
 8002244:	4618      	mov	r0, r3
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	40021000 	.word	0x40021000

08002254 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800225c:	f000 f860 	bl	8002320 <RCC_GetSystemClockFreq>
 8002260:	4602      	mov	r2, r0
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4618      	mov	r0, r3
 800226c:	f000 f87a 	bl	8002364 <RCC_GetHCLKClockFreq>
 8002270:	4602      	mov	r2, r0
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	4618      	mov	r0, r3
 800227c:	f000 f888 	bl	8002390 <RCC_GetPCLK1ClockFreq>
 8002280:	4602      	mov	r2, r0
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	4618      	mov	r0, r3
 800228c:	f000 f894 	bl	80023b8 <RCC_GetPCLK2ClockFreq>
 8002290:	4602      	mov	r2, r0
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	60da      	str	r2, [r3, #12]
}
 8002296:	bf00      	nop
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
	...

080022a0 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80022a8:	2300      	movs	r3, #0
 80022aa:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d12a      	bne.n	8002308 <LL_RCC_GetUSARTClockFreq+0x68>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7ff ff8e 	bl	80021d4 <LL_RCC_GetUSARTClockSource>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d00f      	beq.n	80022de <LL_RCC_GetUSARTClockFreq+0x3e>
 80022be:	2b03      	cmp	r3, #3
 80022c0:	d005      	beq.n	80022ce <LL_RCC_GetUSARTClockFreq+0x2e>
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d114      	bne.n	80022f0 <LL_RCC_GetUSARTClockFreq+0x50>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80022c6:	f000 f82b 	bl	8002320 <RCC_GetSystemClockFreq>
 80022ca:	60f8      	str	r0, [r7, #12]
        break;
 80022cc:	e021      	b.n	8002312 <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 80022ce:	f7ff ff25 	bl	800211c <LL_RCC_HSI_IsReady>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d019      	beq.n	800230c <LL_RCC_GetUSARTClockFreq+0x6c>
        {
          usart_frequency = HSI_VALUE;
 80022d8:	4b10      	ldr	r3, [pc, #64]	; (800231c <LL_RCC_GetUSARTClockFreq+0x7c>)
 80022da:	60fb      	str	r3, [r7, #12]
        }
        break;
 80022dc:	e016      	b.n	800230c <LL_RCC_GetUSARTClockFreq+0x6c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80022de:	f7ff ff2f 	bl	8002140 <LL_RCC_LSE_IsReady>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d013      	beq.n	8002310 <LL_RCC_GetUSARTClockFreq+0x70>
        {
          usart_frequency = LSE_VALUE;
 80022e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022ec:	60fb      	str	r3, [r7, #12]
        }
        break;
 80022ee:	e00f      	b.n	8002310 <LL_RCC_GetUSARTClockFreq+0x70>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80022f0:	f000 f816 	bl	8002320 <RCC_GetSystemClockFreq>
 80022f4:	4603      	mov	r3, r0
 80022f6:	4618      	mov	r0, r3
 80022f8:	f000 f834 	bl	8002364 <RCC_GetHCLKClockFreq>
 80022fc:	4603      	mov	r3, r0
 80022fe:	4618      	mov	r0, r3
 8002300:	f000 f846 	bl	8002390 <RCC_GetPCLK1ClockFreq>
 8002304:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 8002306:	e004      	b.n	8002312 <LL_RCC_GetUSARTClockFreq+0x72>
    }
  }
 8002308:	bf00      	nop
 800230a:	e002      	b.n	8002312 <LL_RCC_GetUSARTClockFreq+0x72>
        break;
 800230c:	bf00      	nop
 800230e:	e000      	b.n	8002312 <LL_RCC_GetUSARTClockFreq+0x72>
        break;
 8002310:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8002312:	68fb      	ldr	r3, [r7, #12]
}
 8002314:	4618      	mov	r0, r3
 8002316:	3710      	adds	r7, #16
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	007a1200 	.word	0x007a1200

08002320 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8002326:	2300      	movs	r3, #0
 8002328:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800232a:	f7ff ff1b 	bl	8002164 <LL_RCC_GetSysClkSource>
 800232e:	4603      	mov	r3, r0
 8002330:	2b04      	cmp	r3, #4
 8002332:	d006      	beq.n	8002342 <RCC_GetSystemClockFreq+0x22>
 8002334:	2b08      	cmp	r3, #8
 8002336:	d007      	beq.n	8002348 <RCC_GetSystemClockFreq+0x28>
 8002338:	2b00      	cmp	r3, #0
 800233a:	d109      	bne.n	8002350 <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800233c:	4b08      	ldr	r3, [pc, #32]	; (8002360 <RCC_GetSystemClockFreq+0x40>)
 800233e:	607b      	str	r3, [r7, #4]
      break;
 8002340:	e009      	b.n	8002356 <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002342:	4b07      	ldr	r3, [pc, #28]	; (8002360 <RCC_GetSystemClockFreq+0x40>)
 8002344:	607b      	str	r3, [r7, #4]
      break;
 8002346:	e006      	b.n	8002356 <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002348:	f000 f84a 	bl	80023e0 <RCC_PLL_GetFreqDomain_SYS>
 800234c:	6078      	str	r0, [r7, #4]
      break;
 800234e:	e002      	b.n	8002356 <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 8002350:	4b03      	ldr	r3, [pc, #12]	; (8002360 <RCC_GetSystemClockFreq+0x40>)
 8002352:	607b      	str	r3, [r7, #4]
      break;
 8002354:	bf00      	nop
  }

  return frequency;
 8002356:	687b      	ldr	r3, [r7, #4]
}
 8002358:	4618      	mov	r0, r3
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	007a1200 	.word	0x007a1200

08002364 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800236c:	f7ff ff08 	bl	8002180 <LL_RCC_GetAHBPrescaler>
 8002370:	4603      	mov	r3, r0
 8002372:	091b      	lsrs	r3, r3, #4
 8002374:	f003 030f 	and.w	r3, r3, #15
 8002378:	4a04      	ldr	r2, [pc, #16]	; (800238c <RCC_GetHCLKClockFreq+0x28>)
 800237a:	5cd3      	ldrb	r3, [r2, r3]
 800237c:	461a      	mov	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	40d3      	lsrs	r3, r2
}
 8002382:	4618      	mov	r0, r3
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	08002890 	.word	0x08002890

08002390 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002398:	f7ff ff00 	bl	800219c <LL_RCC_GetAPB1Prescaler>
 800239c:	4603      	mov	r3, r0
 800239e:	0a1b      	lsrs	r3, r3, #8
 80023a0:	4a04      	ldr	r2, [pc, #16]	; (80023b4 <RCC_GetPCLK1ClockFreq+0x24>)
 80023a2:	5cd3      	ldrb	r3, [r2, r3]
 80023a4:	461a      	mov	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	40d3      	lsrs	r3, r2
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	080028a0 	.word	0x080028a0

080023b8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80023c0:	f7ff fefa 	bl	80021b8 <LL_RCC_GetAPB2Prescaler>
 80023c4:	4603      	mov	r3, r0
 80023c6:	0adb      	lsrs	r3, r3, #11
 80023c8:	4a04      	ldr	r2, [pc, #16]	; (80023dc <RCC_GetPCLK2ClockFreq+0x24>)
 80023ca:	5cd3      	ldrb	r3, [r2, r3]
 80023cc:	461a      	mov	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	40d3      	lsrs	r3, r2
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	080028a0 	.word	0x080028a0

080023e0 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80023e0:	b590      	push	{r4, r7, lr}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80023e6:	2300      	movs	r3, #0
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	2300      	movs	r3, #0
 80023ec:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80023ee:	f7ff ff07 	bl	8002200 <LL_RCC_PLL_GetMainSource>
 80023f2:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <RCC_PLL_GetFreqDomain_SYS+0x22>
 80023fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023fe:	d003      	beq.n	8002408 <RCC_PLL_GetFreqDomain_SYS+0x28>
 8002400:	e005      	b.n	800240e <RCC_PLL_GetFreqDomain_SYS+0x2e>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8002402:	4b14      	ldr	r3, [pc, #80]	; (8002454 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002404:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8002406:	e005      	b.n	8002414 <RCC_PLL_GetFreqDomain_SYS+0x34>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002408:	4b13      	ldr	r3, [pc, #76]	; (8002458 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800240a:	60fb      	str	r3, [r7, #12]
      break;
 800240c:	e002      	b.n	8002414 <RCC_PLL_GetFreqDomain_SYS+0x34>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 800240e:	4b11      	ldr	r3, [pc, #68]	; (8002454 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002410:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8002412:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 8002414:	f7ff ff10 	bl	8002238 <LL_RCC_PLL_GetPrediv>
 8002418:	4603      	mov	r3, r0
 800241a:	3301      	adds	r3, #1
 800241c:	68fa      	ldr	r2, [r7, #12]
 800241e:	fbb2 f4f3 	udiv	r4, r2, r3
 8002422:	f7ff fefb 	bl	800221c <LL_RCC_PLL_GetMultiplicator>
 8002426:	4603      	mov	r3, r0
 8002428:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800242c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002430:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	fa92 f2a2 	rbit	r2, r2
 8002438:	603a      	str	r2, [r7, #0]
  return result;
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	fab2 f282 	clz	r2, r2
 8002440:	b2d2      	uxtb	r2, r2
 8002442:	40d3      	lsrs	r3, r2
 8002444:	3302      	adds	r3, #2
 8002446:	fb03 f304 	mul.w	r3, r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 800244a:	4618      	mov	r0, r3
 800244c:	3714      	adds	r7, #20
 800244e:	46bd      	mov	sp, r7
 8002450:	bd90      	pop	{r4, r7, pc}
 8002452:	bf00      	nop
 8002454:	003d0900 	.word	0x003d0900
 8002458:	007a1200 	.word	0x007a1200

0800245c <LL_TIM_SetPrescaler>:
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <LL_TIM_SetAutoReload>:
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <LL_TIM_SetRepetitionCounter>:
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	695b      	ldr	r3, [r3, #20]
 80024bc:	f043 0201 	orr.w	r2, r3, #1
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	615a      	str	r2, [r3, #20]
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a2f      	ldr	r2, [pc, #188]	; (80025a0 <LL_TIM_Init+0xd0>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d007      	beq.n	80024f8 <LL_TIM_Init+0x28>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024ee:	d003      	beq.n	80024f8 <LL_TIM_Init+0x28>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a2c      	ldr	r2, [pc, #176]	; (80025a4 <LL_TIM_Init+0xd4>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d106      	bne.n	8002506 <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	4313      	orrs	r3, r2
 8002504:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a25      	ldr	r2, [pc, #148]	; (80025a0 <LL_TIM_Init+0xd0>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d013      	beq.n	8002536 <LL_TIM_Init+0x66>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002514:	d00f      	beq.n	8002536 <LL_TIM_Init+0x66>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a22      	ldr	r2, [pc, #136]	; (80025a4 <LL_TIM_Init+0xd4>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d00b      	beq.n	8002536 <LL_TIM_Init+0x66>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a21      	ldr	r2, [pc, #132]	; (80025a8 <LL_TIM_Init+0xd8>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d007      	beq.n	8002536 <LL_TIM_Init+0x66>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a20      	ldr	r2, [pc, #128]	; (80025ac <LL_TIM_Init+0xdc>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d003      	beq.n	8002536 <LL_TIM_Init+0x66>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a1f      	ldr	r2, [pc, #124]	; (80025b0 <LL_TIM_Init+0xe0>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d106      	bne.n	8002544 <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	4313      	orrs	r3, r2
 8002542:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	4619      	mov	r1, r3
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f7ff ff91 	bl	8002478 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	881b      	ldrh	r3, [r3, #0]
 800255a:	4619      	mov	r1, r3
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f7ff ff7d 	bl	800245c <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a0e      	ldr	r2, [pc, #56]	; (80025a0 <LL_TIM_Init+0xd0>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d00b      	beq.n	8002582 <LL_TIM_Init+0xb2>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a0e      	ldr	r2, [pc, #56]	; (80025a8 <LL_TIM_Init+0xd8>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d007      	beq.n	8002582 <LL_TIM_Init+0xb2>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a0d      	ldr	r2, [pc, #52]	; (80025ac <LL_TIM_Init+0xdc>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d003      	beq.n	8002582 <LL_TIM_Init+0xb2>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a0c      	ldr	r2, [pc, #48]	; (80025b0 <LL_TIM_Init+0xe0>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d105      	bne.n	800258e <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	7c1b      	ldrb	r3, [r3, #16]
 8002586:	4619      	mov	r1, r3
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f7ff ff83 	bl	8002494 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f7ff ff8e 	bl	80024b0 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	40012c00 	.word	0x40012c00
 80025a4:	40000400 	.word	0x40000400
 80025a8:	40014000 	.word	0x40014000
 80025ac:	40014400 	.word	0x40014400
 80025b0:	40014800 	.word	0x40014800

080025b4 <LL_USART_IsEnabled>:
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d101      	bne.n	80025cc <LL_USART_IsEnabled+0x18>
 80025c8:	2301      	movs	r3, #1
 80025ca:	e000      	b.n	80025ce <LL_USART_IsEnabled+0x1a>
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr

080025da <LL_USART_SetStopBitsLength>:
{
 80025da:	b480      	push	{r7}
 80025dc:	b083      	sub	sp, #12
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
 80025e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	431a      	orrs	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	605a      	str	r2, [r3, #4]
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <LL_USART_SetHWFlowCtrl>:
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	431a      	orrs	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	609a      	str	r2, [r3, #8]
}
 800261a:	bf00      	nop
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr

08002626 <LL_USART_SetBaudRate>:
{
 8002626:	b490      	push	{r4, r7}
 8002628:	b086      	sub	sp, #24
 800262a:	af00      	add	r7, sp, #0
 800262c:	60f8      	str	r0, [r7, #12]
 800262e:	60b9      	str	r1, [r7, #8]
 8002630:	607a      	str	r2, [r7, #4]
 8002632:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800263a:	d116      	bne.n	800266a <LL_USART_SetBaudRate+0x44>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	005a      	lsls	r2, r3, #1
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	085b      	lsrs	r3, r3, #1
 8002644:	441a      	add	r2, r3
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	fbb2 f3f3 	udiv	r3, r2, r3
 800264c:	b29b      	uxth	r3, r3
 800264e:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8002656:	401c      	ands	r4, r3
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	085b      	lsrs	r3, r3, #1
 800265c:	b29b      	uxth	r3, r3
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	431c      	orrs	r4, r3
    USARTx->BRR = brrtemp;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	60dc      	str	r4, [r3, #12]
}
 8002668:	e00a      	b.n	8002680 <LL_USART_SetBaudRate+0x5a>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	085a      	lsrs	r2, r3, #1
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	441a      	add	r2, r3
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	fbb2 f3f3 	udiv	r3, r2, r3
 8002678:	b29b      	uxth	r3, r3
 800267a:	461a      	mov	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	60da      	str	r2, [r3, #12]
}
 8002680:	bf00      	nop
 8002682:	3718      	adds	r7, #24
 8002684:	46bd      	mov	sp, r7
 8002686:	bc90      	pop	{r4, r7}
 8002688:	4770      	bx	lr
	...

0800268c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b088      	sub	sp, #32
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800269a:	2300      	movs	r3, #0
 800269c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f7ff ff88 	bl	80025b4 <LL_USART_IsEnabled>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d14e      	bne.n	8002748 <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	4b29      	ldr	r3, [pc, #164]	; (8002754 <LL_USART_Init+0xc8>)
 80026b0:	4013      	ands	r3, r2
 80026b2:	683a      	ldr	r2, [r7, #0]
 80026b4:	6851      	ldr	r1, [r2, #4]
 80026b6:	683a      	ldr	r2, [r7, #0]
 80026b8:	68d2      	ldr	r2, [r2, #12]
 80026ba:	4311      	orrs	r1, r2
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	6912      	ldr	r2, [r2, #16]
 80026c0:	4311      	orrs	r1, r2
 80026c2:	683a      	ldr	r2, [r7, #0]
 80026c4:	6992      	ldr	r2, [r2, #24]
 80026c6:	430a      	orrs	r2, r1
 80026c8:	431a      	orrs	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	4619      	mov	r1, r3
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f7ff ff80 	bl	80025da <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	4619      	mov	r1, r3
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f7ff ff8d 	bl	8002600 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a1b      	ldr	r2, [pc, #108]	; (8002758 <LL_USART_Init+0xcc>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d104      	bne.n	80026f8 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80026ee:	2000      	movs	r0, #0
 80026f0:	f7ff fdd6 	bl	80022a0 <LL_RCC_GetUSARTClockFreq>
 80026f4:	61b8      	str	r0, [r7, #24]
 80026f6:	e016      	b.n	8002726 <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a18      	ldr	r2, [pc, #96]	; (800275c <LL_USART_Init+0xd0>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d107      	bne.n	8002710 <LL_USART_Init+0x84>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002700:	f107 0308 	add.w	r3, r7, #8
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff fda5 	bl	8002254 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	61bb      	str	r3, [r7, #24]
 800270e:	e00a      	b.n	8002726 <LL_USART_Init+0x9a>
#endif
    }
    else if (USARTx == USART3)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a13      	ldr	r2, [pc, #76]	; (8002760 <LL_USART_Init+0xd4>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d106      	bne.n	8002726 <LL_USART_Init+0x9a>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002718:	f107 0308 	add.w	r3, r7, #8
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff fd99 	bl	8002254 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00d      	beq.n	8002748 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d009      	beq.n	8002748 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 8002734:	2300      	movs	r3, #0
 8002736:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	699a      	ldr	r2, [r3, #24]
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	69b9      	ldr	r1, [r7, #24]
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7ff ff6f 	bl	8002626 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002748:	7ffb      	ldrb	r3, [r7, #31]
}
 800274a:	4618      	mov	r0, r3
 800274c:	3720      	adds	r7, #32
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	efff69f3 	.word	0xefff69f3
 8002758:	40013800 	.word	0x40013800
 800275c:	40004400 	.word	0x40004400
 8002760:	40004800 	.word	0x40004800

08002764 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	fbb2 f3f3 	udiv	r3, r2, r3
 8002776:	4a07      	ldr	r2, [pc, #28]	; (8002794 <LL_InitTick+0x30>)
 8002778:	3b01      	subs	r3, #1
 800277a:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800277c:	4b05      	ldr	r3, [pc, #20]	; (8002794 <LL_InitTick+0x30>)
 800277e:	2200      	movs	r2, #0
 8002780:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002782:	4b04      	ldr	r3, [pc, #16]	; (8002794 <LL_InitTick+0x30>)
 8002784:	2205      	movs	r2, #5
 8002786:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	e000e010 	.word	0xe000e010

08002798 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80027a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f7ff ffdd 	bl	8002764 <LL_InitTick>
}
 80027aa:	bf00      	nop
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
	...

080027b4 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80027bc:	4a04      	ldr	r2, [pc, #16]	; (80027d0 <LL_SetSystemCoreClock+0x1c>)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6013      	str	r3, [r2, #0]
}
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	20000000 	.word	0x20000000

080027d4 <__libc_init_array>:
 80027d4:	b570      	push	{r4, r5, r6, lr}
 80027d6:	4e0d      	ldr	r6, [pc, #52]	; (800280c <__libc_init_array+0x38>)
 80027d8:	4c0d      	ldr	r4, [pc, #52]	; (8002810 <__libc_init_array+0x3c>)
 80027da:	1ba4      	subs	r4, r4, r6
 80027dc:	10a4      	asrs	r4, r4, #2
 80027de:	2500      	movs	r5, #0
 80027e0:	42a5      	cmp	r5, r4
 80027e2:	d109      	bne.n	80027f8 <__libc_init_array+0x24>
 80027e4:	4e0b      	ldr	r6, [pc, #44]	; (8002814 <__libc_init_array+0x40>)
 80027e6:	4c0c      	ldr	r4, [pc, #48]	; (8002818 <__libc_init_array+0x44>)
 80027e8:	f000 f818 	bl	800281c <_init>
 80027ec:	1ba4      	subs	r4, r4, r6
 80027ee:	10a4      	asrs	r4, r4, #2
 80027f0:	2500      	movs	r5, #0
 80027f2:	42a5      	cmp	r5, r4
 80027f4:	d105      	bne.n	8002802 <__libc_init_array+0x2e>
 80027f6:	bd70      	pop	{r4, r5, r6, pc}
 80027f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80027fc:	4798      	blx	r3
 80027fe:	3501      	adds	r5, #1
 8002800:	e7ee      	b.n	80027e0 <__libc_init_array+0xc>
 8002802:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002806:	4798      	blx	r3
 8002808:	3501      	adds	r5, #1
 800280a:	e7f2      	b.n	80027f2 <__libc_init_array+0x1e>
 800280c:	080028a8 	.word	0x080028a8
 8002810:	080028a8 	.word	0x080028a8
 8002814:	080028a8 	.word	0x080028a8
 8002818:	080028ac 	.word	0x080028ac

0800281c <_init>:
 800281c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800281e:	bf00      	nop
 8002820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002822:	bc08      	pop	{r3}
 8002824:	469e      	mov	lr, r3
 8002826:	4770      	bx	lr

08002828 <_fini>:
 8002828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800282a:	bf00      	nop
 800282c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800282e:	bc08      	pop	{r3}
 8002830:	469e      	mov	lr, r3
 8002832:	4770      	bx	lr
